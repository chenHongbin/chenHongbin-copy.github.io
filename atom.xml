<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Robert_Chen]]></title>
  <link href="http://chenHongbin.github.io/atom.xml" rel="self"/>
  <link href="http://chenHongbin.github.io/"/>
  <updated>2015-03-23T01:42:32+08:00</updated>
  <id>http://chenHongbin.github.io/</id>
  <author>
    <name><![CDATA[陈宏彬]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我读了什么？No.4 (2015-03-22)]]></title>
    <link href="http://chenHongbin.github.io/blog/2015/03/22/wo-du-liao-shi-yao-%3Fno-dot-4-2015-03-22/"/>
    <updated>2015-03-22T20:59:13+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2015/03/22/wo-du-liao-shi-yao-?no-dot-4-2015-03-22</id>
    <content type="html"><![CDATA[<h1>闲言</h1>

<p>说来惭愧，距离上一次写“我读了什么”已经过了2个月！在第一期中告诉自己说</p>

<pre><code>希望2015年自己能够坚持把这个”Harold Weekly”写下去。
</code></pre>

<p>结果三周后就没在坚持了！其实，上周日在骑车的过程中已经在心里打好了腹稿，结果回到宿舍洗个澡后懒人癌发作倒头就睡，然后就没有然后了！</p>

<p>在准备写这篇文章的时候，无意间发现去年的今天（2014年3月22日）我写了这个博客的第一篇文章&mdash;<a href="http://chenhongbin.github.io/blog/2014/03/22/ni-hao-%21wo-de-di-%5B%3F%5D-pian-bo-ke/">&ldquo;你好！我的第一篇博客&rdquo;</a>。这一年自己共写了11篇文章（有两篇在简书上，还没搬到这里），4篇技术文章，2篇年度总结文章，3篇“我读了什么”，1篇开博客文章以及1篇关于自己听的播客。这其中最大收获是：写博客是一种非常棒的思考、总结方式，无论是对于技术的思考，还是对于工作生活的反思，同时也是一个分享好东西的绝妙方式，微博、朋友圈真的很难说清楚很多东西，当然这可能是我自己在表达上的不足。有收获，必然就有遗憾，最大的遗憾是：没有好好的坚持写博客，总是断断续续。所以，希望在接下来的一年里，能够坚持写博客，坚持分享好的东西。</p>

<h1>正文</h1>

<h2>内容消费与内容生产</h2>

<p>最近两件事情让我对于内容的消费和生产有了一些体会：</p>

<p>1.我在简书上发表了一篇<a href="http://www.jianshu.com/p/69449e6bdc14">《关于App的一些迷思以及一些动画效果开源库的推荐》</a>，在三天内得到了120多个赞，近2000次阅读，然后被推荐到简书的首页。</p>

<p>2.在微博上发了一条<a href="http://weibo.com/1764177832/C8wGyudOZ?type=comment#_rnd1427034423106">Auto Layout的一个调试技巧的微博</a>，结果一个晚上后得到了85次转发，15个评论，粉丝数增加了40个，这是我玩微博这么多年来发的最成功的一条微博了！</p>

<p>我不敢说自己写的文章或者微博的质量有多高，但是可以肯定的是这些是我用心去生产的内容，那篇文章我花了一个晚上——近4个小时的时间，从自己平常收集的项目中找出这些优秀的项目，进行分类整理，下载每一个项目的动态效果图等等，而这份用心也得到了大家的认可。由此让我想到，在我们的生活中充满着各种各样的资讯与内容，微信公众号、朋友圈、微博以及各种新闻客户端等等，但是很多时候，我们还是找不到自己喜欢的、有深度的、有价值的内容，很多时候花了大量的时间阅读了大量的信息，却还是感觉空荡荡的。同时，很多文章、内容都是属于典型的标题党，将标题写得十分的抢眼，结果你点进去阅读时，发现要不是文章写的极度的肤浅、没有任何深度和价值可言，就是充斥各种同类抄袭、“借鉴”的文章，很多时候连最基本的可信度都没有！而这东西耗费了用户大量的时间，也使得他们找到有价值的内容要付出更多的精力与成本。</p>

<p>我们知道用户对于优质内容的消费需求远远没有被满足，也永远不会满足！所以，对于内容提供方生产内容的唯一有效法则就是“用心”！而不是为了快、为了热点、为了迎合大众，甚至是为了点击数、阅读量，而放弃“用心”。在此给大家推荐播客《流行通信》<a href="https://ipn.li/popdispatch/16/">《乌云装扮者：「我都快怀孕了我觉得。」》</a>这期节目，节目中微信号“乌云装扮者”背后的神秘人物表达了他对于当前内容消费和内容生产的看法，个人觉得是我挺多的《流行通信》里最值得听的一期！同时，在播客《比特新声》最新的一期<a href="http://www.bitvoice.xyz/episode/34-27-70-">海龙的 27 岁生日的第 70 期</a>的结尾，主持人<a href="http://weibo.com/leeyoung7">@人字拖2号</a>谈到他在录制后期在写本期要点时，会再次将所提及的内容、链接放到Google里去重新检索一边，看看是否有更全面的、更好的介绍和说明，这么用心在做的节目！你说质量怎么可能不好呢？怎么可能不受用户的喜爱呢？</p>

<h2>《噪音太多》</h2>

<p><a href="http://www.amazon.cn/%E5%99%AA%E9%9F%B3%E5%A4%AA%E5%A4%9A-%E6%A2%81%E6%96%87%E9%81%93/dp/B00264FPSA/ref=tmm_pap_title_0?ie=UTF8&amp;qid=1427043819&amp;sr=8-1">《噪音太多》</a>是最近读的梁文道的关于音乐、电影的感想札记书。里面的很多观点刷新了我对于声音、音乐和电影的认识。同时，也获得了几张不错的专辑，以及再次感觉到自己的无知与愚昧。</p>

<pre><code>看电影于我就和听音乐一样，是少年时代追求自由的手段。拒斥庸俗，一开始或许还是为了在同学之间树   
起不凡的自我感觉，但它其实更是为了逃离庸俗的宰制，离开“成人社会”的无聊和谎言，离开森严的学校  
体制，离开社会和国家对你的期盼跟定位。
</code></pre>

<p>一直觉得自己对于音乐，对于电影的接触太晚，尤其对于它们的认识太过于肤浅，所以今年给自己定了个目标：一周看一部电影，听那些著名的专辑，了解那些历史上伟大的乐队，比如披头士。</p>

<p>关于蓝调：</p>

<pre><code>几乎所有蓝调史都会告诉你，无论是南北战争前的美国黑奴还是战后的佃农，都会在工作的时候唱歌。他 
们唱歌，所以劳苦可以稍稍轻松一点。那些歌有整齐的节拍，可以用来跳舞，而且是大伙儿一起跳，就像
他们的祖先曾经在野地上围着火踏步旋转一样。只是在地里干活儿的时候，他们以劳动代替舞蹈。这就是
典型的工作歌，以旋律和节奏协调工人们的一举手一投足，唱到“哼”的时候齐齐举起锄头，唱到“嘿”的时
候一起奋力锄地。蓝调的直接源头不是这种棉花田里的工作歌，而是“筑堤呐喊”。从工作歌到筑堤呐喊，
不只是一种曲式的变化，而且还是整个社会背景的变化。在黑奴解放运动之前，工人们做牛做马；解放运
动之后，他们依然做牛做马。但有一个重要的分别，那就是在过去，他们的身体和人格属于地主，幸运一
点的当佃农的，也有自己归属的农场和土地。这当然是压迫，但在压迫之中工人都有集体的认同，有集体
的身份。但当他们被解放出来成了自由劳工之后，却成了什么都不拥有，什么也不属于的散件工，有点类
似今天在城里头车站旁一排排蹲在地上的民工，等着雇主挑选干那有一天没一天的体力活。换句话说，他
们彻底成了市场上的商品，待价而沽。在美国南方密西西比三角洲地带，他们等到的，往往就是筑堤的工
作。
</code></pre>

<p>之前对于蓝调没有任何的认知，但是看完这段描述后，瞬间对它特别的兴趣，当然，还有民歌：</p>

<pre><code>民歌，无论它的来源是非裔美洲人的灵歌，还是白人移民带来的怀乡之曲，本来都是社会最底层人民从喉
咙底嘶吼出来的声音，谈他们过劳的工作，述说他们卑微的愿望。所以不是西格使得民歌变了调，而是我
们这些现代听众把他们单纯化成“好歌靓声再重聚”！

《我们终将克服》收集的全是最经典的民歌，其中的《Froggie Went A Courting》甚至可以追溯到
1549年的苏格兰，它们的共通点就是一种骨子里的反抗气质和草根力量。这张唱片不只会叫我们对民歌有
全新的认识，也会令美国人吓一跳，因为像《Erie Canal》这些歌几乎都是他们幼稚园里开始唱的传统
曲谣，现在它们深藏的苦难经历一一浮现出来。然后是熟悉抗议音乐传统的人要吃惊了，斯普林斯汀和他
的17人大乐队竟把这些歌曲用班卓琴和小提琴等乡村乐器玩得如此欢乐多姿。 民歌还是可以欢快的，正
如西格的柔和嗓音，当个人哀叹成为集体的嘉年华，力量就会油然而生，We Shall Overcome。 民歌
总是一种不断变化的歌曲。在民间流传，从一个艺人到另一个艺人，从一个社群到另一个社群，它的节奏
会变、唱法会变，即使是它的意义也会和最初大不相同。
</code></pre>

<p>上面说的专辑由Bruce Springsteen集结13位出色的乐手共同完成，这十多位临时合作的乐手所组成的乐队被Springsteen称作The Seeger Sessions Band，专辑中的13首歌都是在事先并没有多次排练的情况下一气呵成。专辑中的13首歌曲全部是翻唱美国民谣的先锋人物皮特·西格的作品。《Mrs. McGrath》、《Pay Me My Money Down》确实是经典之作，尤其是在了解完这些背景后，更感觉是经典中的经典。</p>

<pre><code>情歌之所以成为流行音乐的主流，首先是技术的作用。各色复制、储存和播放音乐的设备使得表演者和听
众不用并存于同一时空，更使得听众能够分解成一个个原子式的个人。我们再也用不着和其他人挤在一
起，只要去唱片行买一张唱片，甚至在电脑上直接下载，然后自己静静细听。 这种技术革命正好发生在
社会转型的关键时刻：大家族的崩解，社区邻里的分裂，令人的情感转向收缩，只投射在另一个人身上。
爱情成为我们这个时代通俗里最受重视，最被颂扬的情感，不是毫无原因的。
</code></pre>

<p>从来没有发现情歌流行的背后是有着这样的技术原因，以及经济、科技发展后所带来的社会转型问题、邻里关系问题。</p>

<pre><code>当你把一副耳筒塞进耳朵，你和世界的关系就开始变了，不只是把你自己从周遭的环境里抽身而出，同时
你还为这个世界注入了另一层不同的意义，使眼前一切呈现出前所未见的色彩。
</code></pre>

<p>声音本是世界的一部分，我们不只是用眼睛去感知环境，更加要用耳朵去接收环境给予的刺激。戴上耳机，原本属于环境整体之一的声音部分被屏蔽了，被抽走了，取而代之的是我们所选择的音乐，环境感知的视觉与听觉被我们认为的分割了。也正是看完这写文字后，在上周骑行的时候，我特地摘掉了耳机，要知道之前的每一次骑行我都是带着耳机的，虽然那样子有点危险。再掉耳机后，我听到了很多有趣、美妙的声音：路过商场时里面正播放的音乐声、海浪拍击岸边的声音、一个小孩跟她妈妈说“那个傻逼”的声音（不知道是不是在说我）、的士跟公交车抢道的喇叭声、一群老人在讨论工人阶级与共产党的声音、情侣在环岛路上散步聊天的声音以及一群的士司机在路边吃关东煮时的声音。将声音还给它所属于的环境确实会带给你一个个美妙的场景。瞬间我就开始后悔当初在骑行台湾时戴着耳机。</p>

<pre><code>一个人为什么要拍电影呢？他必然有很多的想法与欲望。我们或许都听过这样的故事，从电影学院出来的
学生，看了许多大师的作品，也学了一身的技巧和理论，于是他的心里就有了一段故事，一幅图。他觉得
这是只有他能理解的故事，只有他能看见的图画；而这故事与图画的意义是如此的深刻；令人着迷，魂萦
梦系，几年下来不断缠绕着他，甚至成了他的一部分。他越来越相信把这些画面与故事呈现出来成为具体
的电影乃是他的天职，似乎不拍出这部心目中的作品，他就不再是完整的自己了。跟着就要看命运的安排
了，大部分人都没有机会完成自己的使命，犹如最终回不去海岸产卵的小海龟，早夭在无情的暗流。那少
部分回得去的，则要历经磨难，甚至倾家荡产，才勉强做出一套粗糙的半成品。要不是极端的执著，电影
又怎能出现在银幕上呢？ “‘自我’是根本无明，它是被误认为真实的一种幻觉。因此，凡是从‘自我’生
起的一切，一定都是无明与幻觉。”可是，“自我”却总是专注于自己，肯定自己，一心要满足自己的需要
和欲望，好肯定“自我”是真实存在的。由于根本没有“自我”，所以我们永远也不可能满足自我的欲望。

“为了补偿不可能得到真正的快乐，我们制造了成见所形成的替代性虚假的实相和激烈情绪，藉以安
慰自己……就好比去看一场强烈而又有力的电影，因为太专注于情节，忘了那是一场电影，把它当成自己的
生活一般……”。
</code></pre>

<p>不单单是拍电影，那些追求美好事物的人都有很多想法与欲望，他们的内心都有一个自己所理解的、所幻想的世界，他们通过电影、通过音乐、通过文章、通过书籍、通过一个App等等来表达自己的想法与欲望，来构建自己理想的世界，他们不满足于现状，不屈服于困难，这就是我所理解的匠人！</p>

<h2>《野蛮生长》</h2>

<p><a href="http://www.amazon.cn/%E9%87%8E%E8%9B%AE%E7%94%9F%E9%95%BF-%E5%86%AF%E4%BB%91/dp/B00F9RN3WQ/ref=sr_1_1?ie=UTF8&amp;qid=1427043779&amp;sr=8-1&amp;keywords=%E9%87%8E%E8%9B%AE%E7%94%9F%E9%95%BF">《野蛮生长》</a>是万通的董事长冯仑所写的关于民营企业这20多年来的历程的书。里面讲到了民营企业在创业和发展过程中所遇到的问题，包括原罪问题、政商关系，还有企业公民责任等等。</p>

<pre><code>在民营江湖时代，民营企业仿佛为匪为盗，或者像游侠，因为我们在过去的旧体制内长期被限制，一旦离
开以后，实际上有一种特别轻松和自由的快乐。江湖可以看作非正规组织，属于朝廷和民间之间的边缘性
的一种结构；民营企业的人处于边缘性的结构当中是自由的，这种自由的状态下，人会选择快意恩仇，并
感受到很大的幸福，精神上会很愉悦，像侠客一样。 在民营企业初期，虽然背负“原罪”的重压，为什么
还会有这么多人前仆后继地折腾呢？一个原因是逃出原有的体制能获得一种自由感，可以满足人的征服欲
望；同时也有一种成就感，因为在江湖当中，我们都具有一种英雄气，容易滋生英雄的审美，也获得自己
成为英雄的满足感；再者，企业（公司）在江湖中也能获得一种相当于行帮的认同感。这是我觉得很有意
思的一种心理状态。
</code></pre>

<p>其实看完这本书后感觉这段的描写有点自欺欺人，或者说是在安慰自己，因为最早期的这些民营企业很多时候是无奈的选择，是那些被社会所抛弃的边缘人员、劳改释放犯为了活下去不得不做的事，是没有选择的选择。</p>

<pre><code>第一代是从1978年到20世纪90年代初，这时期可以称之为“前公司时代”。当时社会上做生意的主要特征
就是“个体户+官倒”，个体户又叫倒爷，基本上都是做简单的贸易，或者是开个餐馆、钉个鞋子、卖个衣
服（最典型的是广州高第街）。大的就是官倒，倒钢材、倒批文、倒汽车。他们以垄断的方式从事贸易。

那时参与个体经济活动的绝大多数是被社会边缘化的人、劳改释放犯、政策落实了没事干的人和大批返城
知识青年。这些人是被社会抛弃的边缘人，为了生存，于是就自己去想办法。自我生存的一个重要办法就
是做生意了，能做的生意，就是上面讲的小买卖。当时申领的营业执照都是个体经营性质，因为当时没有
公司法规，所以很少成立民间公司，而且私人还不能成立公司，只能够叫作个体经营者、个体户。

民营企业的第二代我称之为“公司时代”，实际上就是从20世纪90年代初到2001年。所谓公司时代，就是
自打有了《公司法》以后，所有的创业和经营活动是以公司形式展开的。这时个体户已经不吃香，由于民
间注册公司越来越容易，所以大家都是以公司的形态开始做生意。而之前个体户、万元户都是以个人和家
庭为单位开展经营的。

民营企业的第三代，从2001年到现在，实际上进入了一个“创富时代”，这个时期最重要的创富加速器是
资本市场。这时很多公司从业务和规模上看已经不是一般的公司，它们中有许多都成为全国乃至全球行业
的领导者，一些大公司和超大公司开始出现。由于这些大公司的出现，加上资本市场的放大作用，大公司
的领导者，包括股东，都变成了快速的财富聚集者。他们迅速成为第三代商人，成为市场经济中民营企业
的一个主导力量。
</code></pre>

<p>看完民营企业的这三代发展历程，让人心中不得不敬佩站在时代浪潮上的企业家，无论是失败的还是成功的，他们对于我们今日的商业环境所做的贡献是如此的巨大、如此的不可忽视，不去了解这段历史，不去看这背后的故事，真的很难懂得我们所处环境的特别，所处环境得来的不易。</p>

<pre><code>面对“原罪”的纷扰，实际上需要一种历史的大智慧，要从一个更长远和更宽广的视野来看。比如，把改革
开放的历史放到一百年的背景下来看，我们现在这个改革所要解决的根本变革，就是要把经济运行模式从
单一的公有、国有，转化为私有、民营为主的市场经济。这么大一个转变，实际上就牵扯到一个财产的腾
挪问题。人类历史告诉我们，这种财产的腾挪或财产关系的根本变革，只有三种形式。一种就是战争和暴
力，比如共产党从1921年成立起与国民党打到1949年，28年的斗争，中间还有抗战，死了几千万人，才
把私人财产从国民党官僚统治集团即四大家族手里，转移到共产党领导的国家来，从私有变成了公有和国
有。这是一种财产转移的方式。 第二种方法，是意外的馈赠。比如欧洲的小公国的国王互相赠送，乞力
马扎罗就曾经被英国人送给德国人做生日礼物。但这种馈赠，在历史上很少见。 第三种财产转移方式，
就是通过市场和交易，通过民间千百个分散的行为，合理却不合法的，合法却不合理的，或者合理又合法
的，慢慢这么倒腾。
</code></pre>

<p>财产的腾挪问题！嗯哼！一个全新的概念！</p>

<pre><code>改革开放这么多年，民营经济经历了这样三个阶段，形成了三代人，每一个阶段参与的人群又不同。第一
阶段是边缘人口加干部子女；第二阶段是全民经商，鱼龙混杂，什么人都下海；第三阶段是创富阶段，实
际上最主要的是一些精英，在商场上筛选出来的行业领袖。这些人相当于来到了水泊梁山的聚义厅。一百
单八将，每个人都有绝活，比如时迁偷东西是绝活，张顺浪里白条是绝活。当今大家都身怀绝技，业绩不
凡，汇聚一起，成为工商界的主体和民营企业的主流。
</code></pre>

<p>看完这个，真的觉得不应该再去抱怨任何东西，处于创富阶段的我们是幸运的，少说多听多做！</p>

<p>最后来一个大长断的民营企业力量分布描述吧：</p>

<pre><code>最早的民营企业，比较集中的当然应该是在特区，主要是深圳、广东、福建，这些地区的民营企业大部分
是以贸易起家。贸易，以及由贸易带动的简单加工业，是珠江三角洲民营企业的一种基本形式。有趣的
是，在中国的鸦片战争之后，开放的通商口岸也是从广州开始的，之后沿海岸线一路北上直到宁波。那
时，广州的十三行是国内最大的贸易公司，家族靠贸易发家，成为中国首富，并晋身全球富豪榜。所以在
广东的民营企业身上，体现出明显的贸易文化。

另一方面，由于临近香港，香港的制造业大量以“三来一补”形式（即“来料加工”“来件装配”“来样生
产”和“补偿贸易”业务）在广东、福建落地生根，这使得当地的民营企业在公司组织制度上更多地受香港
的影响。所以他们更早懂得股票，最先知道炒楼花，然后最先知道怎样开董事会。深圳合资企业最多，那
儿最早有合资企业，有三资企业，所以广东又最先引进了所谓现代企业制度。这样造成了广东最先“觉
醒”了私人财富的概念，也最先“觉醒”了私人消费，因此一开始大款恶性消费都是讲的广东大款。

江浙地区一向有两种文化传统。一种传统是在历史上，清朝以来的习惯，这个地方做小买卖的特别多，那
犄角旮旯任谁都看不起的买卖他们都做了。浙江的许多民营企业仍然沿着这种传统发展起来，如现在的什
么“纽扣大王”“打火机大王”。浙江就有很多这种小的制造业，而这些小的制造业发展成像现在讲的“长尾
理论”中的“长尾”，你看上去小，汇总起来就是巨量。所以这边的民营企业有制造业的文化，是传统的小
作坊式的制造业。他们不是“三来一补”，一开始做的都是很土的小东西，他们的制造业文化中就没有办大
企业的文化，都是做小企业、小制造业。这类小型的作坊式的制造业，几乎百分之百采取了家族管理的方
式。 浙江的另一个传统就是从海上往外跑营销。在历史上，也是自清朝以来，他们一直有出海的习惯，
尤其是温州地区，国际营销的能力很强，他们在国际营销史上一直都是主打欧洲，所以意大利、法国，现
在都有浙江人在那营销。民生消费品当中完全放开竞争的是小商品，目前主要是江浙的企业在做。电饭煲
大王、豆浆机大王、皮鞋大王、衬衫大王，他们一直有这种很好的营销传统。这些“大王”几乎无一例外都
是从营销起家，然后延伸到上游的制造业。

我觉着民营企业的江湖，最明显的实际上主要是三部分，就是广东福建，另外是江浙，再就是海南，它们
真正成为今天中国民营经济舞台上三股最强大的力量。当然，其他地方，例如北京，也有很好的民营企
业，但不管是新经济还是老江湖，都跟这三个地方有关系、有渊源。就像柳传志最初也是在广东、深圳那
儿开始创业的，然后又回到北京。万通和国美也都是这样，都跟这三个地区有关联。因为这三个地区是最
早开放市场的，制度环境比较宽松，贸易活动、经济活动比较活跃，于是培养出了中国最有意思、最有活
力的民营企业。
</code></pre>

<h2>软件正在吞噬整个世界</h2>

<p>最近忙于公司的项目，阅读科技新闻的时间可以说约等于0，所有的时间都在这三件事上：写代码，看书，睡觉。<a href="http://itindex.net/detail/15169-marc-andreessen-%E8%BD%AF%E4%BB%B6/">软件正在吞噬整个世界</a> 虽然已经是11年的老文章了，但是还是觉得非常值得推荐！先说说作者吧，Marc Andreessen是浏览器 Mosaic 的作者以及 Netscape（网景）公司的创始人，也是Facebook、eBay和惠普（HP）的董事会成员。而如果你对于互联网的历史有所了解的话，你就会知道网景公司在整个互联网历史中的地位，可以说它标志着互联网时代的开始，标志着互联网经济的开始，虽然它的结局让人感觉到有点惋惜！</p>

<pre><code>合格的软件工程师，经理，营销和销售人员，无论到哪里都很抢手，而美国的失业率却同时屡创新高，更
糟的是，有大量劳动力因为缺乏相应的技能和经验被困在传统行业之中，他们在软件行业的革命中无法找
到新的工作机会。除了教育，没有什么办法能解决这个问题，但十年树木百年树人，我们还有很长的路要
走。
</code></pre>

<p>对于相应人才的培养，总是感觉国内的大学没有起到相应的作用，或者说没有跟上相应的步伐，具体的就是没有根据市场、环境的变化来开设和修改相应的课程。</p>

<h1>最后</h1>

<p>今天，跟朋友在星巴克待了一天，参加了星巴克咖啡教室的课程，突然发现自己一直以来对于咖啡的了解和认识是那么的肤浅！发现咖啡文化在很多地方跟我们的茶文化很像，比如闻、啜。还有一点就是咖啡真的跟苦没有必然的联系啊！为什么我们谈到咖啡时的第一反应总是“苦”呢？什么？你不是！好吧！我不得不承认其实我挺土的。感谢我的朋友，感谢星巴克！一个快乐的周末！</p>

<p>最后，给大家推荐一个关于咖啡的App吧！<a href="https://itunes.apple.com/us/app/great-coffee-app/id534220544?mt=8">极好咖啡：Great Coffee App</a>。这个应用收集了16种最受欢迎的咖啡饮料的详细信息，包括咖啡单品以及花式咖啡哦，应用照片拍摄精致，音乐搭配优美！每杯咖啡上甚至还有淡淡的水蒸气效果哦，体验很棒！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我读了什么？No.3 (2015-01-18)]]></title>
    <link href="http://chenHongbin.github.io/blog/2015/01/19/wo-du-liao-shi-yao-%3Fno-dot-3-2015-01-18/"/>
    <updated>2015-01-19T23:06:56+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2015/01/19/wo-du-liao-shi-yao-?no-dot-3-2015-01-18</id>
    <content type="html"><![CDATA[<h2>闲言</h2>

<p>写了两期的周报，看着“Harold Weekly”这个标题越看越感觉别扭，最主要的感觉是觉得它词不达意，或者说没有办法让人一目了然，所以索性改成“我读了什么？”这个标题，简单、直接、明了。</p>

<p>这周过的很快，工作上没有按照预期的完成，计划读的书和杂志也都没有读，突然感觉到工作、生活和学习之间失去了平衡，然后内心开始焦虑，而且这种感觉越来越严重！接下来的日子需要好好地调整下，我想第一件事就从调整作息时间开始吧！坚持每天晚上12点半前上床睡觉，早上7点起床，欢迎监督！</p>

<p>这周做了两件觉得挺有意义的事。第一件就是给大学的舍友当伴郎，这是我第一次当伴郎，直到现在想想还是挺激动的。看着舍友结婚、踏入幸福的婚姻生活是件很开心的事，在婚宴上也见了好多大学的同学，也就只有这个时候才会深深的感慨着“毕业2年多了”。最值得称赞的是婚宴前拍摄的几张新郎新娘跟伴郎伴娘团的合影，难得能够让我显得不那么的屌丝！</p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_3/2015-01-15-1.jpg" title="2015-01-15-1" alt="Alt 2015-01-15-1" /></p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_3/2015-01-15-2.jpg" title="2015-01-15-2" alt="Alt 2015-01-15-2" /></p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_3/2015-01-15-3.jpg" title="2015-01-15-3" alt="Alt 2015-01-15-3" /></p>

<p>第二件是回厦门三个月了，一直计划着单车环厦门岛，结果因为单车被偷未能成行，最近小军的单车一直在我这，所以终于有机会把这个Todo给完成了。只不过过程有点不那么顺利，骑到东渡的时候前轮破胎了，牵了40多分钟的单车才找到一家修理店。最终还是花了3.5个小时完成了环岛骑行。</p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_3/2015-01-17-1.jpg" title="2015-01-17-1" alt="Alt 2015-01-17-1" /></p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_3/2015-01-17-2.jpg" title="2015-01-17-2" alt="Alt 2015-01-17-2" /></p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_3/2015-01-17-3.jpg" title="2015-01-17-3" alt="Alt 2015-01-17-3" /></p>

<p>说了这么多闲话后，开始进入正题吧。首先从一个我也不认识的一个人说的一句话开始吧！</p>

<pre><code>“Writing is nature’s way of letting you know how sloppy your thinking is. ”         
                                                                 –– Guindon
</code></pre>

<p>写作跟写代码其实有很多相似的地方，通过写作的方式能够将你头脑里存在的想法、思考的问题统统具象化、文字化，通过具象化、文字化来让自己进一步加深对这些想法、问题的理解和认识。这就像你在学习一个新的API，虽然你已经了解了它的用法，但是到真正要敲代码的时候，还是要看几眼API文档、看几个例子（这样的场景应该不是只有我一个人这样吧！）。</p>

<p>1、<a href="http://www.shubhro.com/2014/12/27/software-engineers-should-write/">Software engineers should write</a></p>

<pre><code>Software engineers should write because it promotes many of the same skills
required in programming. A core skill in both disciplines is an ability to 
think clearly. The best software engineers are great writers because their 
prose is as logical and elegant as their code.
</code></pre>

<p>这是一个老生常谈的问题，其实在网络上可以搜到一堆鼓励程序员写博客的文章，以及一堆列举程序员写博客的好处的文章。所以，如果你是程序员也不用看这篇文章，直接开始写博客吧！</p>

<p>2、<a href="http://t.cn/RZa35PU">可视化的数据之美</a></p>

<p>美国工程师Eric Fischer从Twitter上抓取了最近的63亿条消息，并将它们的发布来源以绿色光点的形式展示在全球地图上，绘制出了一幅壮丽的数据画卷(推荐用PC访问），整张地图是可以通过鼠标滚动自由放大/缩小的，可以细致到具体的城市及街道。在厦门岛内发 Twitter 最多地方集中在中山路那一片，而软件园二期貌似不是很多人在使用 Twitter。</p>

<p>3、<a href="http://www.techug.com/3-kind-of-software-engineer">三种软件工程师——编码员、程序师和架构师</a></p>

<p>程序员们（很明显按照这篇文章，其实这个叫法是错的！）可以根据上面的分类将自己归类下，然后看看是否符合自己的职业规划，或者能否对你有点启发呢？</p>

<p>4、<a href="https://medium.com/@sachagreif/why-crappy-developers-are-more-productive-5f24a2040c54">Why Crappy Developers Are More Productive</a></p>

<pre><code>I’ll deal with it if there’s no way around it, but that doesn’t mean I have
to enjoy it. So the gratification happens when I finally ship a new feature, 
not while I’m building it.
</code></pre>

<p>承接上面那篇文章，这篇文章解释了为什么那些看是蹩脚的程序员却更有效率呢？因为他们追求的是通过编程解决问题，重点是在解决问题上，而不是编程这件事上，编程只是他们解决问题的手段，如果可以绕过编程解决问题，他们就不会选择编程。这就是上篇文章里说到的程序师和架构师的区别。</p>

<p>5、<a href="http://www.techug.com/the-art-of-programming">编程的艺术</a></p>

<pre><code>我认为编程就是艺术的一种形式，你知道：不是所有的艺术家都是一样的。像很多画家一样，很多程序员
也只是在复制东西，从来没有带来原创的东西。

真正的艺术家是不同的。TA 们都能去创造新东西，TA 们为未来带来新的标准，TA 们把现在的环境
「变」得更好，TA 们不恐惧危机。「复制者」会尝试说「为什么不不用 X 或者 Y 来创造新东西呢？」
让 TA 们停下。

因为 TA 们不会满意用 X 或 Y，所以 TA 们要成为学习工具来自我实验；因为 TA 们想要创造，所以 
TA 们在代码中表达自己；TA 们只想无拘束的去做，所以即使不是大事儿也可以改变世界。
</code></pre>

<p>6、<a href="http://www.36kr.com/p/218796.html">Google Play应用数量首次超越App Store</a></p>

<p>唯一想说的是，可惜在国内无法使用 Google Play.</p>

<p>7、<a href="http://sixcolors.com/post/2015/01/battery-life-apples-solving-for-x/">Battery life: Apple’s solving for x</a></p>

<pre><code>“So when you’re anticipating the next model of iPhone or iPad, and wondering 
if it’ll show markedly improved battery life, keep this in mind: So far Apple 
has behaved as if the battery life of the iPad and the iPhone are perfectly 
fine as is, and that it would prefer to create a thinner and lighter model to 
one that puts the makers of external battery packs out of business.”
</code></pre>

<p>从文章中的几张图可以发现，iPad 系列的电池续航一直都很稳定，都是10个小时的续航时间，而 iPhone 似乎就没有那么稳定了。当然不可否认的是目前电池容量的问题可能受限于材料上。</p>

<p>8、<a href="https://medium.com/@chadfowler/your-most-important-skill-empathy-a75ffe5e0877">Your Most Important Skill: Empathy</a></p>

<pre><code>Empathy is the most important skill you can practice. It will lead to greater 
success personally and professionally and will allow you to become happier 
the more you practice.
</code></pre>

<p>在产品设计中最经常被提到的一个词就是“同理心”，这篇文章介绍了几个提供“同理心”的方法。慎言多听，知己知彼。</p>

<p>9、<a href="http://zh.wikipedia.org/wiki/%E8%BE%BE%E5%85%8B%E6%95%88%E5%BA%94">达克效应</a></p>

<pre><code>达克效应（英语：D-K effect），全称为邓宁-克鲁格效应（英语：Dunning–Kruger effect），是
一种认知偏差现象，未经训练的个体会感到一种虚幻的自我优越感，错误地认为自己比大多数人都优秀。
</code></pre>

<p>我们或多或少都应该有过达克效应，对于我们未知的领域还是应该保持敬畏心与尊重感。</p>

<p>10、<a href="https://vimeo.com/115305205">What&rsquo;s New in iOS8 for Hipsters </a></p>

<p>这个视频介绍了几个 iOS8上好用便捷的方法，值得一看。</p>

<p>11、<a href="https://medium.com/ios-os-x-development/navigating-and-discovering-a-code-base-using-lldb-bca7c10115cf">Navigating and discovering an iOS codebase using lldb</a></p>

<p>当我们接手一个新的项目，然后需要改一些bug时，常常会被陌生的代码搞得晕头转向，常常因为要找一个bug而得手动到处设置断点，这篇文章教你使用 lldb 这一利器来有效的解决这些问题、提高开发和Debug的效率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014我拍的10张最有意义的照片]]></title>
    <link href="http://chenHongbin.github.io/blog/2015/01/18/2014wo-pai-de-10zhang-zui-you-yi-yi-de-zhao-pian/"/>
    <updated>2015-01-18T21:21:47+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2015/01/18/2014wo-pai-de-10zhang-zui-you-yi-yi-de-zhao-pian</id>
    <content type="html"><![CDATA[<h2>闲言</h2>

<p>2014年结束了，看着网上各种2014年的回顾、总结，我也觉得应该写点东西回顾、总结下自己的2014。考虑了几次后，决定用三篇文章来回顾自己的2014，分别为:</p>

<p>1、<a href="http://chenhongbin.github.io/blog/2015/01/03/2014wo-du-guo-de-zui-hao-de-10ben-shu/">2014我读过的最好的10本书</a></p>

<p>2、2014我用过的最好的10个App</p>

<p>3、<a href="http://chenhongbin.github.io/blog/2015/01/18/2014wo-pai-de-10zhang-zui-you-yi-yi-de-zhao-pian/">2014我拍的10张最有意义的照片</a></p>

<p>本篇是这个回顾系列的第二篇文章，回顾下2014年10张最有意义的照片。</p>

<h2>前言</h2>

<p>首先，需要说明下的是题目中虽然有“我拍的”几个字，但这10张照片中有4张是出自别人之手。</p>

<p>其次，选择这10张照片根据的是这些照片中记录的那些人、那些事和那些风景，无关任何构图、取景等等专业的摄影技术。</p>

<p>最后，今天是2015年01月18号，已经双脚踏入15年了，我还欠着一篇关于14年用的最好的10个App的文章。</p>

<h2>照片1</h2>

<p><img src="http://chenHongbin.github.io/images/2014_10_photos/2014-01-22.jpg" title="2014-01-22" alt="Alt 2014-01-22" /></p>

<p>这张是在老东家2013年尾牙宴上，表演完节目后我们几个人在后台的纪念合影。准备节目的过程有点让人想到大学社团的活动，大家抽出时间、约定地点排练，然后还没准备好就充充上台了，最后还得了个奖。不得不说的是我在里面是属于拖后腿的角色，我真的没有任何艺术细胞！</p>

<h2>照片2</h2>

<p><img src="http://chenHongbin.github.io/images/2014_10_photos/2014-04-17.jpg" title="2014-04-17" alt="Alt 2014-04-17" /></p>

<p>这是福州鼓楼的温泉支路，网龙851大楼门口，每年3、4月份的时候温泉支路上的羊脚蹄会开满白色、粉红色的花，大概会持续十多天左右，这个时候的温泉支路应该是“福州最美的一条路！” 带着自己的女朋友漫步在这花海里是件挺不错的事，之所以选择这张照片，也是因为我做过这件事。</p>

<h2>照片3</h2>

<p><img src="http://chenHongbin.github.io/images/2014_10_photos/2014-05-24.jpg" title="2014-05-24" alt="Alt 2014-05-24" /></p>

<p>去三明大田参加最好的朋友&mdash;吴奋琼婚礼的路上。第二天回来福州的时候，结束了一段恋情（失恋了），我跟吴奋琼开玩笑说“你的结婚纪念日，我现在记得比你还清楚了！”。本来是要拿一张第二天的照片，可惜找不到任何照片，所以就拿这张照片替代，纪念自己单身了。</p>

<h2>照片4</h2>

<p><img src="http://chenHongbin.github.io/images/2014_10_photos/2014-06-01.jpg" title="2014-06-01" alt="Alt 2014-06-01" /></p>

<p>一直都觉得我妈包的粽子是最好吃的，之前都没有拍过我妈包粽子，今年的端午节，终于拍了张她包粽子的照片。</p>

<h2>照片5</h2>

<p><img src="http://chenHongbin.github.io/images/2014_10_photos/2014-06-15.jpg" title="2014-06-15" alt="Alt 2014-06-15" /></p>

<p>一直很向往骑行活动，今年6月初的时候买了人生第一辆公路车。这是买来的第二个周末，跟着小伙伴骑行彩虹村，在路上趁着没有车的时候趴在马路中间拍的，发到朋友圈反响还不错，有个朋友说，他买自行车是因为看到了这张照片。</p>

<h2>照片6</h2>

<p><img src="http://chenHongbin.github.io/images/2014_10_photos/2014-08-16.jpg" title="2014-08-16" alt="Alt 2014-08-16" /></p>

<p>8月15号，回漳州办理完去台湾的证件后，到厦门找曾冰冰，她请我到潮福城吃了顿大餐，听我唠叨了一堆，然后不断地鼓励当时心情极度低落的我。现在想想仍然十分的感动！</p>

<h2>照片7</h2>

<p><img src="http://chenHongbin.github.io/images/2014_10_photos/2014-09-30-1.jpg" title="2014-09-30-1" alt="Alt 2014-09-30-1" /></p>

<p>忘记具体哪一天了，在骑行群里看到别人发的一个两个漂亮的台妹骑行台湾的视频后，心中开始无比的向往，然后某一天看到一个同事的朋友圈里有它在12年（或者11年）骑行台湾的照片，于是询问了他，他给了我一堆材料，然后告诉我骑行台湾很简单，我也就这样的踏上了骑行台湾的旅途。这是当时从平潭坐近4个小时的丽娜号轮船到达台北港时，在台北港的留影。</p>

<h2>照片8</h2>

<p><img src="http://chenHongbin.github.io/images/2014_10_photos/2014-09-30-3.jpg" title="2014-09-30-3" alt="Alt 2014-09-30-3" /></p>

<p>骑行的一个乐趣就是你可以遇到到很多人，这是到达台湾那天在台北寻找住的地方时，问路遇到的两个朋友，前面的这个大哥，祖籍漳州，我的老乡，在我们后面的骑行中，不断地发来问候、关心的信息，让人感受到台湾人发自内心的热情，可惜在垦丁的时候错过了再次相逢的机会！总之，台湾人是台湾最亮丽的一道风景！</p>

<h2>照片9</h2>

<p><img src="http://chenHongbin.github.io/images/2014_10_photos/2014-10-09.jpg" title="2014-10-09" alt="Alt 2014-10-09" /></p>

<p>骑行台湾的第十天，在东海岸逆着强悍的东北季风痛苦的骑了3天，前一天晚上淋着雨骑了20多公里，骑行也慢慢的进入了尾声，整个身体处于疲惫的状态。这天我们5点多就抵达了目的地花莲，要知道我们骑了13天，这么早到达目的地的也就2、3天吧！在骑往花莲市区的路上看到了彩虹，那时候的心情现在用言语已经表达不出来了，总之身上的疲惫感去了不少。</p>

<h2>照片10</h2>

<p><img src="http://chenHongbin.github.io/images/2014_10_photos/2014-10-27.jpg" title="2014-10-27" alt="Alt 2014-10-27" /></p>

<p>离开福州，结束一年多的福州生活，回厦门和几个小伙伴一起努力打拼。这天晚上在动车上遇到了一个好心的大哥，帮我拎着自行车的前胎。生活中好人还是比较多的，所以“Don&rsquo;t Be Evil”。</p>

<h2>最后</h2>

<p>在准备写这篇文章的时候，在著名的博客 <a href="http://taiwan.chtsai.org">Taiwan 2.0</a> 上看到这篇文章<a href="http://taiwan.chtsai.org/2014/12/31/siji_lunhui_2014/">《四季輪迴，2014》</a>，作者每天都会从自己当天或近期拍的照片中挑一张做成 Facebook 动态时报封面，然后每年的最后一天，用这些照片做成了一个回顾视频，对于我们这些局外人，可能看完那个视频后不会有太多的感觉，但是对于作者本人应该是一个不错的感受。所以，我决定在15年多拍些照片，然后，年底的时候也做一个类似的视频。</p>

<p>最后，放上一张我那被偷的单车照片，纪念下它！感谢它陪我走了那么多路，带给我那么多乐趣，让我看到、认识到那些人、那些事和那些风景。</p>

<p><img src="http://chenHongbin.github.io/images/2014_10_photos/2014-10-03.jpg" title="2014-10-03" alt="Alt 2014-10-03" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Harold Weekly:No.2(2015-01-11)]]></title>
    <link href="http://chenHongbin.github.io/blog/2015/01/12/harold-weekly-no-dot-2-2015-01-11/"/>
    <updated>2015-01-12T00:55:51+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2015/01/12/harold-weekly-no-dot-2-2015-01-11</id>
    <content type="html"><![CDATA[<h2>闲言</h2>

<p>这是第二期的“Harold Weekly”,上周发表完第一期后就盼着新的一期早日到来，一直在脑海里想着新的一期写些什么？记录些什么？（这应该是新鲜期的症状）然而等时间到的时候，却变得惶恐不安，不知道该记录些什么？</p>

<p>这周主要通过几个关键词来串联下看到的文章和接触到的事。</p>

<h2>关键词一：书与书店</h2>

<p>首先，上周的“Harold Weekly”提到了马克·扎克伯格的2015新年计划&mdash;每两周读一本书，同时在facebook上创建了一个公共主页<a href="https://www.facebook.com/ayearofbooks?fref=nf">“A Year of Books”</a>，他将在该主页上发布一年来他看过的所有书籍，并且邀请他3000多万粉丝中喜欢看书的朋友都能来该主页点赞。单单看到“3000多万”粉丝就能够想象到那些在这上面提到的书籍应该很快会成为畅销书。于是在<a href="http://recode.net">re/code</a>上出现了这样的一副漫画：<a href="http://recode.net/2015/01/05/zuck-goes-book-zerk-comic/">Zuck Goes Book-Zerk! (Comic)</a>:</p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_2/Zuck_Goes_Book_Zerk.jpg" title="Zuck_Goes_Book_Zerk" alt="Alt Zuck_Goes_Book_Zerk" /></p>

<p>基于英文水平、文化背景已经其他的认知上的不足，我暂时还悟不出这幅画具体想表达什么？希望知道的人可以告诉我下！在这里先说声“谢谢”</p>

<p>其次，周三原本是要趁着在福州出差的空隙把之前遗留的公积金提取的事处理下，结果因为没带齐证件而作罢，却偶然间看到了一间“晓风书屋”，于是进去逛了下，在一个角落里找到了自己喜欢的几本书。</p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_2/book1.jpg" title="book1" alt="Alt book1" /></p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_2/book2.jpg" title="book2" alt="Alt book2" /></p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_2/book3.jpg" title="book3" alt="Alt book3" /></p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_2/book4.jpg" title="book4" alt="Alt book4" /></p>

<p>这种偶遇到自己喜欢的、平常时候接触不到的书的感觉很棒，但伴随着科技的发展却很难在生活中体验到了！因为“到书店购书”这一行为已经被“网上购书”所替代，而网上的各种智能算法正在不断地根据你的浏览记录、购买记录和收藏记录来给你推荐相似的书籍，渐渐地你只能看到固定的某几类书籍，却看不到其他类别的、你平常接触不到但一定会喜欢的书籍（感觉说的很绕，但是我暂时想不到一个好的说法），比如，之前我对于游记类的书籍并不感冒，但是在为台湾骑行做准备的时候，无意看了几本这类书籍，一下子就喜欢上了这类书籍，而这类书籍是算法所没办法推荐给我的。“沒有意外，沒有惊喜。”这让我又重新看了下上周的这篇文章：<a href="http://taiwan.chtsai.org/2014/12/18/tushuguan_de_xin_jiazhi/">图书馆的新价值</a></p>

<blockquote><p>&ldquo;在網路愈來愈發達的現代，人們反而愈來愈少這種置身於大量隨機的記憶線索的體驗了。很多人只看自己想看的東西，而網站透過各種演算法也儘量提供使用者想看的東西。每個人的世界都收斂到一個很小的點。沒有意外，沒有驚喜。&rdquo;</p></blockquote>

<p>最后，上周说的<a href="http://www.paulgraham.com/index.html">格雷厄姆</a>的这篇<a href="http://www.paulgraham.com/know.html">How you know</a>在36氪上有了中文翻译<a href="http://www.36kr.com/p/218250.html">如果人的思想是程序，阅读和经历就是源代码</a>，看完后，发现跟自己读英文版的理解差的好多，我的好好感谢下翻译的人！</p>

<blockquote><p>阅读和生活经历构成了你的世界观，即使你忘记了具体的经历或者阅读内容，它们的影响力仍在。人的思想就像一个编译过的程序，源代码或许找不到了，它们默默的发挥着作用，可你却不知道为什么。</p></blockquote>

<p>所以，不要总为读完一本书后不记得内容而焦虑，因为它们在默默的发挥着作用。</p>

<blockquote><p>你在憧憬未来时不可能将以前积累的点点滴滴串连起来，你只能在回顾过去时将它们串连起来。所以你必须相信，当前积累的点点滴滴，会在你未来的某一天串连起来。你必须相信某些东西——你的勇气、目的、生命、因缘等等——相信它们会串联起你的生命，这会让你更加自信地追随你的心，甚至，这会指引你不走寻常路，使你的生命与众不同。</p></blockquote>

<p>我记得不止跟3个朋友说过类似的观点，我们现在所经历的一切构成现在的你，所以不要急着去定义你所经历的事的“好坏”，那些无所谓好坏，那是都是你的人生经历。</p>

<blockquote><p>乔布斯的座右铭&#8221;stay hungry，stay foolish&#8221;，也许也可以理解为，忘记你已经学过的东西，始终保持对未知世界的好奇心和谦卑，不断地汲取更多地知识。因为即使忘记了知识本身，它所沉淀的智慧也会一直伴随你，更好的认识这个世界。</p></blockquote>

<p>这句话出现在很多个性签名里，但是有多少人去真真的思考和理解它呢？学会忘记，拥抱变化，抱有一颗空杯的心！</p>

<h2>关键词二：出租车</h2>

<p>这个关键词的由来是，周二傍晚和一个同事在福州打的时听到的一个中年壮汉师傅的抱怨，他抱怨出租车司机是一个非常没有社会地位的、得不到应有的尊重的职业，用司机的话说就是“连骑电动车的人都看不起你，都骂你”。想到美剧<a href="http://tv.sohu.com/s2012/personofinterest1/">《疑犯追踪》</a>里在拯救一名纽约的出租车司机时 Harold Finch 说的：出租车司机的危险指数是其它行业的20倍，他们每天接触着大量的形形色色的人，永远不知道坐在后面的是天使，还是魔鬼。</p>

<p>那天看到极客公园的这篇文章：<a href="http://www.geekpark.net/topics/212084">一群手艺人和他们的互联网品牌</a></p>

<blockquote><p>「这是肯定的」小元冲着我疑惑的神情解释道：「顾客的评价都是公开的，我们现在就是靠口碑的。」当中介消除后，每个去中心化的个体都可以突破地理的位置界限，享受彼此的便利。服务方也不再是冷冰冰的个体，因为每次服务，都在塑造他们个人自己的品牌。</p></blockquote>

<p>功夫熊、河狸家这些产品的出现消除了以往中介的存在，在这种模式下，用户是获益的，提供这些服务的平台如功夫熊、河狸家，也是获益的，但受伤害的是千千万万的传统中介性质的服务企业，这就是互联网的去中介化。虽然平台也是一个中介，但是它是一个很薄的中介。（这里随便再推荐一篇很早前看到的文章<a href="http://yunfeng.baijia.baidu.com/article/34574">《姚劲波谈服务业：公司、平台、个人》</a>）</p>

<p>那么，问题就来了，滴滴打车和快的打车这类平台的出现，为什么没有像功夫熊、河狸家一样在一定程度上提高出租车司机的社会地位和尊严呢？个人认为问题是在于：滴滴打车和快的打车他们没有改变出租车行业的规则，或者说还未颠覆出租车行业，而这一颠覆行为可能是发生在专车服务上。</p>

<p><a href="http://www.pingwest.com/two-different-faces-between-taxi-drivers-and-professional-drivers/">为什么出租车司机和商务专车司机长着两张截然不同的脸？</a>这篇文章中问的几个问题，我想能够说明些什么：</p>

<blockquote><p>为什么出租车司机和商务转车司机长着两张截然不同的脸？为什么移动应用和地理位置服务纵使解决了一部分让乘客和司机能更高效率匹配的问题，却不能真正提升人们搭乘出租车的体验？</p>

<p>这个问题如果问的更直接一点：为什么用移动互联网技术彻底改变出租车行业很难？为什么移动互联网技术只能从私家车和商务专车入手最大限度地改善人们的交通出行体验，而这又恰恰是出租车行业及其背后利益相关的政府监管机构最痛恨的？</p></blockquote>

<p>其中几个观点我蛮认同的。</p>

<p>观点一：</p>

<blockquote><p>其中一个非常重要的原因是：尽管移动打车应用——比如滴滴和快的们即便能建立一套司机与乘客的互相评价体系，但这套评价体系无法真正地影响出租车司机的现实利益。因为制约出租车司机现实收益的强势一方仍来自出租车公司，而并非第三方叫车应用。</p></blockquote>

<p>观点二：</p>

<blockquote><p>这就是两者的区别——打车应用除了解决乘客与司机的对接之外，其它的一切都是为了维系出租车最低水准的服务现状，乘客处在食物链的最下层。而对出租车之外的专车应用来说。乘客在最关键的角色上。对打车应用来说，大多数的市场营销成本花在了给出租车司机赠送手机和发补贴上，而对其它的专车服务来说，用鲜花、冰淇淋、宠物、交响乐、大牌明星和特斯拉法拉利讨好乘客们，占了市场营销预算的很大一部分。</p></blockquote>

<p>观点三：</p>

<blockquote><p>出租车公司的商业运营是建立在提供最低限度的服务基础上的——包括最复杂的沟通叫车流程（街头扬招或电话预约）、成本最低的车型、最简易的装置、最低水准的环境和最粗暴的沟通方式。它带来的是乘客与司机信息的持续不对称和彼此之间陌生紧张的关系，并因此制定让出租车公司利润空间较高的价格。</p></blockquote>

<p>最后用微博大V作业本的一条微博<a href="http://www.weibo.com/1220291284/BED8ZiQYc?type=comment#_rnd1421002874268">为什么要挺专车？</a>和 <a href="https://ipn.li/itgonglun/133/">IT公论 133期 “自给自足的方便vs. 用钱买来的方便” </a> 30分钟左右开始 Rio 对于出租车行业现状的剖析，以及拥有私车在今天是一件很浪费的事的观点来作为这个关键词的结尾吧！（播客就自己去听吧，这里不方便展示）</p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_2/texi.jpg" title="texi" alt="Alt texi" /></p>

<p>最后的最后，周六傍晚第一次体验了滴滴打车的专车服务，总结来说：服务态度确实好！</p>

<h2>关键词三：质量</h2>

<p>这里说的质量是关于软件的质量，是关于大家都熟悉的苹果的OX及iOS系统的稳定性的讨论。</p>

<p>坦白的说，对于这两个系统上遇到的问题，我没有一个很直接的感受，可能是我对于这些系统的性能、质量的感知能力还有急需提高，但是，从日常看到的新闻和微博上的讨论不难看出，苹果在这两年里慢慢的给大家留下了“系统越来越不稳定”、“软件质量越来越差”的印象。在这周随着国外著名的独立开发者 Marco Arment   写的这篇<a href="http://www.marco.org/2015/01/04/apple-lost-functional-high-ground">Apple has lost the functional high ground</a>文章，再次引起了大家的激烈讨论。</p>

<blockquote><p>过去几年，我们常常嘲笑 Windows 系统漏洞百出；现在在考虑对苹果产品的系统和应用进行升级时，我们也开始抱着怀疑、担心的态度了</p></blockquote>

<p>苹果向来以出色的软硬件体验而著称，但市场竞争的加剧使得苹果在软硬件结合的体验把控上出现了一些失衡。</p>

<blockquote><p>I suspect the rapid decline of Apple’s software is a sign that marketing1 is too high a priority at Apple today: having major new releases every year is clearly impossible for the engineering teams to keep up with while maintaining quality. Maybe it’s an engineering problem, but I suspect not — I doubt that any cohesive engineering team could keep up with these demands and maintain significantly higher quality.</p></blockquote>

<p>对多数人而言，相比每年都来一次系统“大换血”，或者每次更新系统都有一串新功能可以体验，可能系统的稳定性更为重要。Marco Arment 认为，我们首先需要的是电脑、手机、平板这些设备能正常工作，接着才是在此基础上的逐步更新。</p>

<blockquote><p>We don’t need major OS releases every year. We don’t need each OS release to have a huge list of new features. We need our computers, phones, and tablets to work well first so we can enjoy new features released at a healthy, gradual, sustainable pace.</p></blockquote>

<p>这篇文章 <a href="http://mjtsai.com/blog/2015/01/06/apples-software-quality-continued/">Apple’s Software Quality, Continued</a> 收集网上大量的相关评论，有苹果前工程师、工程师等等。</p>

<p>由于一篇文章引起了轩然大波，可能远远超出了 Marco Arment 的预期，所以第二天他马上写了篇<a href="http://www.marco.org/2015/01/05/popular-for-a-day">What it’s like to be way too popular for a day</a> 来解释说自己的言辞可能有点过激了。</p>

<blockquote><p>I’ll keep writing — I can’t stay away. But academically, it’s not worth the risk.</p></blockquote>

<h2>关键词三：对象</h2>

<p>大家千万不要误会，这里的对象指的是编程中的Object。这星期看了几篇关于对象的思考的几篇博客，鉴于实践得太少，很多东西还是模模糊糊的，在此，只能先记录下，等以后有了更深的体验后再来翻翻。</p>

<p>1、关于状态机 <a href="http://khanlou.com/2015/01/finite-states-of-america/">Finite States of America
</a> ，在Github上有两个相关的开源库：<a href="https://github.com/blakewatters/TransitionKit">TransitionKit</a> 和 <a href="https://github.com/luisobo/StateMachine">StateMachine</a></p>

<p>2、<a href="http://khanlou.com/2014/05/replace-enumerations-with-types/">Replace Enumerations with Types</a></p>

<p>3、<a href="http://khanlou.com/2014/12/pure-objects/">Pure Objects</a></p>

<p>4、<a href="http://darrenhobbs.com/2007/04/11/tiny-types/">Tiny Types</a> 和 <a href="http://khanlou.com/2014/05/the-value-of-value-objects/">The Value of Value Objects</a></p>

<p>5、<a href="http://objccn.io/issue-7-2/">值对象</a></p>

<h2>其它</h2>

<p>1、<a href="http://m.csdn.net/article/2015-01-05/2823412">“极致”神话和产品观念</a></p>

<blockquote><p>今天的科技圈的朋友们，经常挂在嘴边的，就是“极致”。在论坛和新闻里，某某公司的成功源自他们对于“极致”的追求，某某公司产品的伟大，在于他们阐述了“极致”的用户体验等。一时间，似乎一个做技术的企业，如果不追求极致，如果不拿极致来标榜自己，就是不入流的表现，就是圈内朋友眼中的恐龙。</p></blockquote>

<p>这篇文章是一位工程师写的，从一个工程师的视角反思了目前互联网圈子对“极致”的过度崇拜和追求。</p>

<blockquote><p>软件开发是有规律的，开发者在开发的过程中的确有很大的成长空间，但是软件产品在特定功能情境下，就应该维持其可运行状态就是最好。认为有了更强的开发能力或者更新的见解就肆意对成熟软件产品进行轻率的架构重整，只为实现本来已经实现了功能，往往因为未能理解原来设计的奥妙导致得不偿失。</p></blockquote>

<p>“极致”从来都不是产品需要具备的品质，甚至从来都不是成为产品的开发倾向。产品的天性，只是迎合消费者的需要，体现技术的价值而已，无他。</p>

<blockquote><p>&lsquo;代码是为产品服务，产品是为用户服务的。&#8217;这是一个非常简单直接的道理，但是这个道理在纷繁复杂的当今社会，竟然被各种花花绿绿五光十色的词汇所裹挟与扭曲，忽视用户，忽视产品生命周期，追求虚无缥缈的所谓“极致”与“完美”，出现这样的苗头其实是非常令人诧异和心痛的。</p></blockquote>

<p>在乔布斯的时代，其实，乔布斯说的对多的观点应该是，「It just works」。我认为，这才是我们应该推崇的产品理念，是一个更环保的产品理念！</p>

<p>从一个产品架构开始，到一个产品功能，到实现功能所需要的代码，都应该考虑是否环保。环保的产品是恰如其分的可以工作，环保的代码是在当前的那个情境能达到运行状态。</p>

<p>2、<a href="http://mp.weixin.qq.com/s?__biz=MjM5NTI5MjM2OA%3D%3D&amp;ascene=2&amp;devicetype=iPhone+OS8.1.1&amp;fontScale=100&amp;from=timeline&amp;idx=1&amp;isappinstalled=0&amp;key=2f5eb01238e84f7e400067ca4db343017c19ae1c84cc9d83e7c823aad81f4f70f71097be510abe1a7d86bb4e20051126&amp;mid=203386196&amp;pass_ticket=VTkff81WOifm5WZYGRIcMMfiFyUyv5%2F3JbM6v2UmuMQ%3D&amp;scene=2&amp;sn=a2239ab471ff3c7b58b45f4c43e0e682&amp;uin=MTQ3NzE1NDc1&amp;version=16000216">移动互联网正吃掉整个世界</a></p>

<blockquote><p>移动互联网格局还未完全固定，如就“I installed an app on my Android smartphone.”这句话，其中“下载”、“APP”、“Android”、“智能手机”，这四个概念都还有很大发展空间，2020 年我再说这话时，可能和现在意思已大有不同。</p></blockquote>

<p>这个的论述方式，让我眼前一亮。</p>

<blockquote><p>通常跟技术相关公司分三种。一是以技术为核心的公司，如苹果；二是通过技术改进产品或扩展业务，但技术不是核心，如亚马逊；三是被新技术催生出的公司，可能做的是传统行业，但都基于新技术，如 Airbnb。而如果重点关注第三种公司，我们会发现：每波技术创新浪潮，都会催生一些新行业。</p></blockquote>

<p>这样的趋势说明:</p>

<blockquote><p>软件和移动互联网已开始走向被内化阶段，成为各行业理所当然、不可或缺的组成部分。软件和移动互联网正在吃掉整个世界，科技业自身已容不下技术发展的张力。</p></blockquote>

<p>3、<a href="http://www.36kr.com/p/218458.html">Instagram真的打败Twitter了吗？</a></p>

<blockquote><p>数字很重要，用户数很重要，但是还有其他很多事也很重要。不同的服务会创造不同的价值，以不同的方式。在相信数字的同时也要相信自己的良心。看到真正重要的东西，做真正好的产品。</p></blockquote>

<p>4、<a href="http://www.36kr.com/p/218578.html">一个19岁美国少年眼中的各种社交应用</a></p>

<p>虽然上面说到的大部分应用都是我们无法使用的，但是看到这个还是觉得挺有意思的！尤其是在周末，是在社交应用最活跃的时间短。</p>

<h2>最后</h2>

<p>现在是北京时间2015-01-12 03:58分。这是对一个拖延症患者的惩罚，这篇文章应该是可以早早的就写完的，应该也是可以更加的完美的，在此，批评下自己。</p>

<p>用这样的方式来反思和总结一周的生活、工作和学习，还是挺有趣的！不过，发现这周我看书的时间不足三个小时，原本要读完的书还停留在已阅读11%的状态，就特别的绝望，对自己深深的绝望，在这样子下去估计2015年第一个月的读书计划应该是彻底没法完成了！</p>

<p>最后，发一张周末跟我姐、还有她儿子在环岛路骑车时，我亲姐拍的除了太糊了其它堪称完美的照片。</p>

<p><img src="http://chenHongbin.github.io/images/Harold_Weekly_No_2/2015-01-10.jpg" title="2015-01-10" alt="Alt 2015-01-10" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Harold Weekly:No.1(2015-01-04)]]></title>
    <link href="http://chenHongbin.github.io/blog/2015/01/04/robert-weekly-1-2015-01-04/"/>
    <updated>2015-01-04T22:49:15+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2015/01/04/robert-weekly-1-2015-01-04</id>
    <content type="html"><![CDATA[<h2>起因</h2>

<p>想做这个&#8221;Harold Weekly&#8221;（后面有叫这个名字的原因）已经有一段时间，最开始有这个想法的时候应该是14年11月底，那个时候我一直在找一种方法或一个工具来整理、收藏平常阅读到的不错的新闻、博客、看的书的内容、观点，以及一些视频、照片等。之所以有这个需求原因有这几个：</p>

<p>1、平常我获取资讯的途径比较杂，在Instapaper、Reeder、微博、印象笔记、知乎等等收藏了很多文章，每当我想去找一篇之前看过的文章的时候，都得耗费我相当大的精力，而且随着收藏量的增加，它变得越来越痛苦；</p>

<p>2、之前一直在看《第一财经周刊》（在这我得自我批评下，我已经有好几个月没看了！），也发现没有一个很好的地方来收集和整理从这些纸质媒体上阅读到的一些观点和内容，包括书也一样！</p>

<p>3、越来越觉得在信息爆炸的时代，对信息的整理和思考是一件很有必要，同时也是很有技巧的事。如何将平常看到的碎片化的内容经过有效的整理、思考和沉淀来构建成一个知识整体是我一直在思考和实践的问题。</p>

<p>4、逼迫自己去思考，思考一切！</p>

<p>刚开始我是通过<a href="http://zh.wikipedia.org/wiki/IFTTT">IFTTT</a>服务加微博来实现这个需求的，最主要的方式是将网络上所有能够添加到Instapaper的内容都直接添加到Instapaper，然后设置了一个IFTTT Recipes:“如果我在Instapaper点赞或者高亮某段文字，就将这些内容发送到微博上。”，其次是设置其他各种App的IFTTT Recipes（当然前提是这些App得支持IFTTT,在此我深表遗憾的是国内目前为止只有新浪微博支持IFTTT），如Twitter、Youtobe、Instagram、Vimeo等等在这上面的发布和收藏操作都会自动发一条微博，至于其它的就只能手动发微博了。这样子我整个微博就是我平常阅读的精彩内容的集合，但是总是感觉在这之中太过于自动化，而导致缺少点思考和总结。所以我就萌生了利用这个博客，每周写一篇“周报”来回顾过去一周看到的值得思考、回顾的[新闻内容]、[博客文章]、[视频]、[看的书的书摘]，当然还有最重要的[iOS开发技术]等。我会列出这些内容中我个人觉得不错的观点和内容，有时候会加上自己的看法，用这样的形式来思考、整理和沉淀这些东西。</p>

<p>最后，纠结了下这个“东西”或者说“栏目”到底要取什么名字？第一个想到的是叫&#8221;周报&#8221;，但是真的感觉很官方、很死板、很土、很low，所以第二个想到是叫“Robert Weekly”，不过突然想到最近看的美剧<a href="http://tv.sohu.com/s2012/personofinterest1/">《疑犯追踪》</a>里的 Harold Finch 深得我心，所以最终决定叫&#8221;Harold Weekly&#8221;。（多看几次，觉得确实很low）</p>

<p>最后的最后，希望2015年自己能够坚持把这个&#8221;Harold Weekly&#8221;写下去。</p>

<h2>新闻、博客</h2>

<p>1、<a href="http://taiwan.chtsai.org/2014/12/18/tushuguan_de_xin_jiazhi/">图书馆的新价值</a></p>

<blockquote><p>&ldquo;在網路愈來愈發達的現代，人們反而愈來愈少這種置身於大量隨機的記憶線索的體驗了。很多人只看自己想看的東西，而網站透過各種演算法也儘量提供使用者想看的東西。每個人的世界都收斂到一個很小的點。沒有意外，沒有驚喜。&rdquo;</p></blockquote>

<p>越来越多的个性化推荐服务虽然方便了我们的生活、消费和服务，但是往往也阻碍了我们接触到未知事物的途径，这对于那些不喜欢探索未知事物的人应该是好事，但是对于那些喜欢接触新鲜事物的人应该算是一个烦恼吧。</p>

<blockquote><p>“我們認定的傳統閱讀媒介，紙本印刷的形式，在整個文字的歷史上只佔很少一部分。如果人們不再依戀龜甲與竹簡，總有一天也一樣會不再依戀紙張與印刷。 就像《華氏 451 度》裡的這句說：「你需要的不是書，而是某些藏在書裡的東西。」”</p></blockquote>

<p>对于那些眷念纸质书的人，Kindle是个玩具，不足以承载“某些藏在书里的东西”</p>

<p>2、<a href="http://taiwan.chtsai.org/2013/05/08/huashi_451_du/">华氏451度</a></p>

<blockquote><p>“人們能夠閱讀的時間並沒有增加，資訊量卻快速增加。在我們能夠接觸到的所有資訊中，有時間讀完的可能不到 1%。我們必須發展出更精緻更有效率的閱讀策略，才能決定要完整閱讀哪 1% 的內容。閱讀的時間必然時零碎的，但良好的認知與後設認知能力仍能幫助你將片段的閱讀經驗建構成整體。”</p></blockquote>

<p>这就是我要开始写这个“Harold Weekly”的主要原因</p>

<p>3、<a href="http://paulgraham.com/ecw.html">How to be an expert in a changing world.</a></p>

<blockquote><p>It seems to me that beliefs about the future are so rarely correct that they usually aren&rsquo;t worth the extra rigidity they impose, and that the best strategy is simply to be aggressively open-minded. Instead of trying to point yourself in the right direction, admit you have no idea what the right direction is, and try instead to be super sensitive to the winds of change.</p></blockquote>

<p>保持一个开放的心态，从日常多去倾听别人的看法和观点开始！</p>

<blockquote><p>Good new ideas come from earnest, energetic, independent-minded people.</p></blockquote>

<p>好的新想法来自认真、专注、独立思考的人。</p>

<blockquote><p>It&rsquo;s hard enough already not to become the prisoner of your own expertise, but it will only get harder, because change is accelerating. That&rsquo;s not a recent trend; change has been accelerating since the paleolithic era. Ideas beget ideas. I don&rsquo;t expect that to change. But I could be wrong.</p></blockquote>

<p>4、<a href="http://blog.codinghorror.com/because-reading-is-fundamental-2/">Because Reading is Fundamental</a></p>

<p>这篇文章的观点是所有的讨论、争辩的基础是你必须对事件有一定的了解，只有在了解的基础上去讨论、争辩才有意义，而了解的基础是去阅读、学习相应的内容。（理解有误的话请谅解哈！）</p>

<p>5、<a href="http://www.ituring.com.cn/article/74086">硅谷最具杀伤力的网络公司</a></p>

<blockquote><p>纽马克的世界观基于一个简单的信念：“人们都是好人，值得信赖，通常只关心好好过日子。互联网的目的是通过连接每个人，使我们的生活变得更加美好。我只是想让人们轻松一下。”</p></blockquote>

<p>这个应该就是我们说的初心，突然想到我的QQ个性签名“勿忘初心，但行好事”</p>

<blockquote><p>纽马克于1999年辞掉了他的全职工作 ，把克雷格目录网站注册成公司，并将公司25%的股份赠给他的职员菲利普•诺尔顿 (Phillip Knowlton)。纽马克认为，克雷格目录是一份属于每一个人的社会财富。如果他独自拥有整个公司，他就会自我膨胀，进入“中年疯狂期”。他还决定不把克雷格目录当作一个非营利机构来运作，因为非营利机构的运营模式会要求他学习和遵循太多的规则（具有讽刺意味的是，根据美国政府的规定，运营非营利机构可能比运营营利性的企业更为复杂）。纽马克认为，如果他赚的钱太多，没有人能够阻止他捐出这些钱。</p></blockquote>

<p>&ldquo;如果他赚的钱太多，没有人能够阻止他捐出这些钱。&rdquo; 想想也是哈！</p>

<blockquote><p>从克雷格目录的成长过程和运营方式我们可以看到，其对传统行业的杀伤力来自于因新技术的应用而带来的社会效率的大幅度提升。</p></blockquote>

<p>6、<a href="http://www.gemag.com.cn/8/4552_1.html">淘金热、电气革命和互联网</a></p>

<blockquote><p>人们很难从历史中学到经验，因为通常人们并不熟悉历史。</p></blockquote>

<p>外加：历史永远是一个任人打扮的小姑娘</p>

<blockquote><p>在淘金热中，人们是名副其实的“跳船”。旧金山港湾被600艘用于运送淘金者的船挤爆了。这些船把淘金者运送到加州后，全体船组成员也都弃船跑去淘金了。所以整个港湾中整整有600艘船和600个船长，他们索性把船改造成旅店，反正也没办法把船驶到别的地方去。旧金山军事基地曾经有13000名士兵，而他们中的一半人都逃跑去淘金了，可军方却不敢让剩下的一半人去找回逃走的那一半人，因为怕他们也不回来了。其中有一个士兵最终回到了军队，军方对他的最终审判中说到：“他在做正确的事但每月赚6美元与做错误的事但每天赚75美元之间痛苦地挣扎着”</p></blockquote>

<p>我们现在是否是处在移动互联网的淘金热中呢？或者是智能家居？又或者可穿戴设备？</p>

<p>7、<a href="http://www.pingwest.com/mark-zuckerberg-starts-a-book-club/">2015年，喜欢看书的马克·扎克伯格希望和大家一起看书</a></p>

<blockquote><p>2015年了，每个人都会有一个新年计划，马克·扎克伯格也在其个人主页上发表了他的新年计划——两周看一本书，感受不一样的文化、信仰、历史和技术</p></blockquote>

<p>顿时觉得我自己没有理由不看书了！其实，看不看书对于每个人的需求是不一样的，看书只是获取知识的一种途径，在互联网如此发达的今天，获取知识的途径自然就不限于读书，最重要的还是要找到适合于自己的获取知识、信息的方式。对于我，我觉得我的方式就是&mdash;-看书。</p>

<blockquote><p>我发现阅读书籍能让人更加聪明和充实。书能让你沉浸下来，这是当下任何一个追求短平快和碎片化阅读的媒体都做不到的。我期待未来能转变我的生活习惯，从上网浏览新闻变成静下来阅读书籍。</p></blockquote>

<p>8、<a href="http://www.ifanr.com/dasheng/479718">用户体验，也要源于生活</a></p>

<blockquote><p>移动互联网很有意思的地方是，你把你的体验可以复制给别人，所以用心生活，就是未来成功开发的基石</p></blockquote>

<h2>视频</h2>

<p>提示：观看这个两个视频需要自备梯子！</p>

<p>1、<a href="http://taiwan.chtsai.org/2014/12/26/pinguo_2014_yedan_guanggao/">蘋果 2014 耶誕廣告：我們的歌</a></p>

<blockquote><p>蘋果的廣告呈現的價值主張總是能如此精準地提出能夠回應消費者心中的價值觀，而這件事情並不容易。</p></blockquote>

<p>2、<a href="https://www.youtube.com/watch?v=77hi9SuKfiI&amp;app=desktop">Apple官方关于《我们的歌》的背景介绍</a></p>

<blockquote><p>Whether it’s making a record in a booth for someone thousands of miles away, or a song in GarageBand for someone you love, it’s not just the tools that count, it’s the thought behind the gift.</p></blockquote>

<h2>书摘</h2>

<p>1、这周在看的书是<a href="http://www.amazon.cn/%E7%A1%85%E8%B0%B7%E7%99%BE%E5%B9%B4%E5%8F%B2-%E4%BC%9F%E5%A4%A7%E7%9A%84%E7%A7%91%E6%8A%80%E5%88%9B%E6%96%B0%E4%B8%8E%E5%88%9B%E4%B8%9A%E5%8E%86%E7%A8%8B-%E7%BE%8E-%E9%98%BF%E4%BC%A6%C2%B7%E6%8B%89%E5%A5%A5/dp/B00P20KGL6/ref=sr_1_1?ie=UTF8&amp;qid=1420391142&amp;sr=8-1&amp;keywords=%E7%99%BE%E5%B9%B4%E7%A1%85%E8%B0%B7">硅谷百年史——伟大的科技创新与创业历程(1900-2013)</a></p>

<blockquote><p>很多人误以为公司存在就是为了赚钱。我认为，虽然钱是公司存在的一个重要结果，但衡量成功的标准应该是（在成本和利润受到限制时），一个公司如何生产出自己的产品。</p></blockquote>

<p>语出惠普创始人帕卡德</p>

<blockquote><p>硅谷是由梦想和体制构成的。梦想是一种奇特的东西，它产生于一个人的心中，当一位创业者激励一个团队创办一家公司时，梦想就像野火一样蔓延开来。体制则提供了所有必要的资源：人才、高效率的工作环境、支持创业者的基础服务、正确的文化思维等。</p></blockquote>

<p>这就是硅谷</p>

<blockquote><p>他们怀有的愿景，是要让世界成为他们想象的那样。</p></blockquote>

<p>让世界成为他们想象的那样</p>

<blockquote><p>硅谷能够成功，是因为它鼓励明智的失败。一句耳熟能详的忠告是：”失败是常事，但要失败得快些。”</p></blockquote>

<p>失败得快些，看似逗趣的话，实则应该是产品快速迭代试错的方法论吧，哦不，应该是我想多了！</p>

<blockquote><p>成功和失败应该是平衡的。如果你还没有失败过，那说明你还没有尝试；但如果你只是失败过，那说明你还不知道怎样正确地做事。科曼相信：“你所学到的不仅仅是失败和如何才能成功，还有心理上如何应对失败。”</p></blockquote>

<p>对失败如此理性的解读不是一朝一夕能够养成的吧！</p>

<blockquote><p>所有的这些学校创造了什么？富人和“书呆子”。保罗.格雷厄姆写过一篇文章，名为《怎样成为硅谷》，他开玩笑说：“创造一个有助于创业的环境，这两种人就是你所需要的。”此外，格雷厄姆还相信，一种个性（开放和宽容的态度），加上一大批通常受过良好的教育、具有科学和工程背景的青年学生，对一个地方贡献良多。在格雷厄姆看来，在技术成为主流之前的数十年间:湾区已是一块吸引年轻人和乐观人士的磁石。&#8221;它是一个人们去探索新事物的地方……与加利福尼亚的潇洒是同义词”。并且，格兰诺拉麦片文化（Granola)、滑雪、冲浪、健步走、瑜伽以及对技术的狂热都没有消亡。</p></blockquote>

<p>没错这个<a href="http://www.paulgraham.com/index.html">格雷厄姆</a>，就是我在朋友圈提到好几次的那个硅谷著名天使投资人，再次推荐下<a href="http://www.paulgraham.com/index.html">格雷厄姆</a>的文章值得反复拜读，每一篇文章都有醍醐灌顶之功效，尤其是对于创业的人，那些文章不失为一本好的商业教材！上面提到的<a href="http://paulgraham.com/ecw.html">How to be an expert in a changing world.</a>，还有<a href="http://www.paulgraham.com/know.html">How you know</a></p>

<h2>iOS开发</h2>

<p>1、<a href="http://nshipster.com/the-death-of-cocoa/?utm_campaign=iOS_Dev_Weekly_Issue_179&amp;utm_medium=email&amp;utm_source=iOS%2BDev%2BWeekly">The Death Of Cocoa</a></p>

<blockquote><p>Swift is compelling not just in terms of what the language itself can do, but what it means to Apple, to iOS &amp; OS X developers, and the developer community at large. There are so many factors in play that questions of technical feasibility cannot be extricated from their social and economic consequences.</p></blockquote>

<p>Matt大神对于Cocoa框架的思考，很多东西我也看不懂，但是总觉得留着多看看还是有好处的。</p>

<p>2、<a href="http://robots.thoughtbot.com/efficient-json-in-swift-with-functional-concepts-and-generics">Efficient JSON in Swift with Functional Concepts and Generics</a></p>

<p>3、<a href="http://commandshift.co.uk/blog/2014/12/28/nice-web-services-swift-edition/?utm_campaign=iOS_Dev_Weekly_Issue_179&amp;utm_medium=email&amp;utm_source=iOS%2BDev%2BWeekly">Nice Web Services, Swift Edition</a></p>

<p>连续两篇关于用Swift实现JSON解析的文章。序列化和反序列化是编程中很头疼的一件事，希望有一个系统提供的SDK可以将这件头疼的事情一并处理了，将程序员从中解放出来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014我读过的最好的10本书]]></title>
    <link href="http://chenHongbin.github.io/blog/2015/01/03/2014wo-du-guo-de-zui-hao-de-10ben-shu/"/>
    <updated>2015-01-03T11:41:17+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2015/01/03/2014wo-du-guo-de-zui-hao-de-10ben-shu</id>
    <content type="html"><![CDATA[<h2>闲言</h2>

<p>2014年结束了，看着网上各种2014年的回顾、总结，我也觉得应该写点东西回顾、总结下自己的2014。考虑了几次后，决定用三篇文章来回顾自己的2014，分别为:</p>

<p>1、2014我读过的最好的10本书</p>

<p>2、2014我用过的最好的10个App</p>

<p>3、2014我拍的10张最有意义的照片</p>

<p>本篇是这个回顾系列的第一篇文章，回顾下我在2014年的阅读情况。</p>

<h2>前言</h2>

<p>先谈谈我个人对于阅读的理解。</p>

<p>首先，我一向觉得阅读清单跟你手机里的歌曲列表、所装的App一样是一件很私密的东西，因为通过这些可以看到一个人的兴趣爱好、一个人的精神生活、一个人的品味等等，当然，这些兴趣爱好、品味是没有高低贵贱之分的，这也是我觉得阅读的可贵之处，因为它代表了一种平等、一种自由，无论你是什么人、在社会处于什么样的地位，你都可以通过阅读得到快乐、得到知识。也是基于私密的这个考虑，平常时，我是不爱跟别人推荐书单的，因为深怕因为兴趣爱好上的不同而浪费了别人的时间，甚至让别人失去阅读兴趣（当然这个明显是我想多来了）。</p>

<p>其次，是关于为什么阅读？我的阅读史并不长，大学之前的阅读量约等于0，大学四年的阅读量应该不超过20本，毕业后，因为对移动互联网的兴趣，所以每天的业余时间大部分都花在看各种科技报道上，在某一段时间，突然感觉那些报道并没有真正的回答清楚这些事件背后的原因、历史、文化等等我所关心的问题，简单说他没有回答清楚“为什么？”。于是，我开始阅读与科技相关的书，这算是我阅读的开始，后面慢慢的开始接触其它类别的书，人文类、管理类、产品设计类等等，在今年，在准备骑车环台湾岛（这是我今年做的最有意义的事）的过程中，第一次接触到了游记类的书。这是我最开始的动机，但是随着人的成长，“为什么阅读”的答案也在不断的改变着，对于今天的我原因有二：一是通过阅读探索未知的世界，探索我所好奇的知识，二是信息爆炸的如今，我们能够阅读的时间并没有增加，但是资讯量却不断的增加。通过阅读我可以不断提高自己甄别信息的能力，可以有效地提取自己需要的知识。当然，我相信过几年后，这个问题的答案应该不一样了。</p>

<h2>阅读总结</h2>

<p>先说说我阅读的工具。</p>

<p>首先，最值得一提的是，在3月份的时候我买了一台 <a href="http://www.amazon.cn/gp/product/B00JG8FMO6/ref=fs_kpwp">Kindle Paperwhite 2</a>,它是我在2014年的阅读主力工具，当然在接下来几年这地位应该是不会改变的，同时我也在不遗余力的帮它做推广。关于它的各种测评、体验报告网络上已一堆，这里我就说说我最直观的一点感受，就是大部分我想要买的书的电子书版本都可以在亚马逊上买到，而在多看、豆瓣等地方就会经常遇到买不到的情况，我很需要一个大一统的东西。</p>

<p>其次，除了Kindle，<a href="https://itunes.apple.com/us/app/kindle-read-books-ebooks-magazines/id302584613?mt=8">Kindle for iOS</a>、<a href="http://www.duokan.com">多看</a>是我阅读电子书的第二选择。不过今年在多看上看的书好像就只有1本，这本书还是因为它是小米的副总裁黎万强写的，所以在多看上首发了，亚马逊过了好久才有。</p>

<p>最后，纸质书，今年买的纸质书主要有两类，一类是技术类书籍，总是觉得技术书的电子版排版都做的很差，尤其是代码，所以对于技术书我大部分都选择买纸质书，第二类是，买不到电子书版本的书，这些书真的是让人又爱又恨，很长一段时间我都觉得“不出电子书的纸质书都是在耍流氓”，尤其是在搬家的时候。</p>

<p>书籍方面，在量上，2014年我总共读了42本书（书单在文章的最后），离自己在14年年初定下的100本书的目标差距有点大（我在写到这边的时候，狠狠的打了自己5下脸），出现这个问题的主要原因是，我在14年年初定这个目标的时候，并没有根据自己的实际阅读能力和阅读时间来做预估，而是脑袋一热、不假思索的一拍大腿就把100当作14年的目标阅读数量。至于15年的目标，在我经过认真、严谨、谨慎的评估和思考后，数量将定在60本，也就是每个月5本，平均一周一本左右。如果再没有完成，我就录个我打脸的视频放在这上面！！</p>

<p>在质上，2014年读完42本书后，我写了0篇读后感，只是简单的在书本中画画线、做做标注，偶尔会在印象笔记中摘抄几段书中的段落、观点等。出现这个情况是意料之外、情理之中！意料之外是，我之前搭建这个博客的目的之一就是想偶尔写一些觉得不错的书的读后感，按照之前的计划至少应该有5篇的，结果是0篇。情理之中是，我一直以为当前对于我的主要问题是阅读数量上的问题，所以我把写读后感这件事放在了一个很次要、很次要的地位，觉得达到一定的量后，我才能开始写读后感。每次读完一本书后，我就马上开始看第二本书，没有给自己点的时间去思考、去做些读书笔记去沉淀、内化那些知识。所以，在接下来的15年里，阅读量依然是我追求的，同时要求自己坚持每个月写一篇读后感，在读完每本书后，尽量利用思维导图来思考、回顾每本书的内容。希望16年年初写15年总结的时候不要再打脸了。</p>

<h2>最好的10本书</h2>

<p>正如前面所说的，我个人不喜欢向别人推荐书单，在这里仅仅是出于对自己过去一年的阅读所做的总结，没有任何推荐之意！所以，如果你们因为看到我的这篇文章才去阅读这里所提到的书，然后发现不符合你的口味，发现浪费了你的时间的时候，我不负任何责任！这里的总结大部分来自亚马逊里相应的书籍介绍和评论，我只是做一个搬运工，然后牢骚几句！</p>

<p>1、<a href="http://www.amazon.cn/%E5%9C%A8%E5%BB%BA%E7%AD%91%E4%B8%AD%E5%8F%91%E7%8E%B0%E6%A2%A6%E6%83%B3-%E5%AE%89%E8%97%A4%E5%BF%A0%E9%9B%84/dp/B00OH78VJO/ref=sr_1_1?ie=UTF8&amp;qid=1420265470&amp;sr=8-1&amp;keywords=%E5%AE%89%E8%97%A4%E5%BF%A0%E9%9B%84%EF%BC%9A%E5%9C%A8%E5%BB%BA%E7%AD%91%E4%B8%AD%E5%8F%91%E7%8E%B0%E6%A2%A6%E6%83%B3">《安藤忠雄：在建筑中发现梦想》</a></p>

<blockquote><p>我认为建筑的原点正是住宅。住宅起源于人类最根本的欲望，忠实地呈现出长久居住在当地的人们的生活与气候风 土。探访世界各地的本土性住宅时，有时也会遇到出人意表 的展示性建筑，让我重新体验到人类生活的复杂多样。以现 代价值观来看，地方性住宅看起来或许是前现代又非理性的。 但是，我却从那里感受到人们蓬勃的生气、对居住的强烈渴 望所产生的力量，以及活在现代的我们居住环境中所没有的质朴内涵</p></blockquote>

<p>对于这本书，我觉得你甚至都不需要去理解书中说到的那些理论、那些建筑术语、那些建筑大师，只需要把书本中提到的建筑在Google中一一搜索过去，看看那些建筑的照片，你就会感受到建筑的力量，感受到起源于欧洲（书中提到的经典建筑大部分是欧洲的，提到中国的建筑貌似只有唯一的福建土楼）的现代文明的张力，感受到建筑和自然结合的那种美，可惜在我们身边似乎很难找到那种建筑。</p>

<p>2、<a href="http://www.amazon.cn/%E8%AE%BE%E8%AE%A1%E4%B9%8B%E4%B8%8B-%E6%90%9C%E7%8B%90%E6%96%B0%E9%97%BB%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E8%AE%BE%E8%AE%A1-%E6%90%9C%E7%8B%90%E6%96%B0%E9%97%BB%E5%AE%A2%E6%88%B7%E7%AB%AFUED%E5%9B%A2%E9%98%9F/dp/B00HUA52T2/ref=sr_1_1?ie=UTF8&amp;qid=1420266390&amp;sr=8-1&amp;keywords=%E8%AE%BE%E8%AE%A1%E4%B9%8B%E4%B8%8B">《设计之下：搜狐新闻客户端的用户体验设计》</a></p>

<blockquote><p>形而上者谓之道，形而下者谓之器。匠者，器也。处身平凡的匠人不断追求向上的设计之道</p></blockquote>

<p>没有花哨的语言，华丽的外衣，只是将实实在在的流程与方法裸裎给大家。写在书中的是搜狐新闻客户端UED团队一线经验的总结，不仅有很多设计细节案例，更有对用户体验设计的思考和感悟，以及设计人员与产品、开发、运营及市场人员沟通的方法和技巧。</p>

<p>3、<a href="http://www.amazon.cn/%E5%AE%9A%E4%BD%8D-%E6%9C%89%E5%8F%B2%E4%BB%A5%E6%9D%A5%E5%AF%B9%E7%BE%8E%E5%9B%BD%E8%90%A5%E9%94%80%E5%BD%B1%E5%93%8D%E6%9C%80%E5%A4%A7%E7%9A%84%E8%A7%82%E5%BF%B5-%E9%98%BF%E5%B0%94%C2%B7%E9%87%8C%E6%96%AF/dp/B009WMBV9Q/ref=sr_1_1?ie=UTF8&amp;qid=1420266662&amp;sr=8-1&amp;keywords=%E5%AE%9A%E4%BD%8D">《定位》</a></p>

<p>在我们做产品的过程中，这几个问题一直是我们思考的：目标用户是谁？ 是什么？ 提供什么价值？为什么能提供这个价值？这本有史以来对美国营销影响最大的观念的书就是回答你如何去寻找这些问题的答案的书，当然这是一本偏理论的书，所以的东西还是要根据具体的问题具体的分析的，所有的理论只有落实到实践中，产生真真确确的结果才是重点。</p>

<p>4、<a href="http://www.amazon.cn/%E4%B8%80%E5%8F%AAiPhone%E7%9A%84%E5%85%A8%E7%90%83%E4%B9%8B%E6%97%85-%E6%9B%BE%E8%88%AA/dp/B00871MNKY/ref=sr_1_1?ie=UTF8&amp;qid=1420267133&amp;sr=8-1&amp;keywords=%E4%B8%80%E5%8F%AAiPhone%E7%9A%84%E5%85%A8%E7%90%83%E4%B9%8B%E6%97%85">《一只iPhone的全球之旅》</a></p>

<blockquote><p>讲述了iPhone幕后的故事。苹果的iPhone手机在美国设计，在日本制造关键零部件，由韩国制造最核心的芯片和显示屏，由台湾厂商供应另外一些零部件，最后在深圳的富士康工厂里组装，然后空运到美国，再被苹果商店门口排队的华人买走，走私回中国，然后卖到中国各地，然后又被深圳的手机作坊回收翻新再出售，最后被当作电子垃圾拆解回收……本书作者曾航遍访了全球二十多家苹果供应商和合作伙伴，实地到日本、韩国，中国台湾、中国香港、深圳、苏州、长沙等地的苹果供应链走访，跟踪了一只iPhone的一生，还原出iPhone从设计、零部件制造、组装、运输、销售、走私、再销售、回收翻新直到被分解处理的全球之旅。</p></blockquote>

<p>《一只iPhone的全球之旅》揭示了苹果在乔布斯之外的强大竞争力，读完《一只iPhone的全球之旅》这本书，你会发现乔布斯并不是神，他背后的幕僚和众多合作伙伴，同样是苹果成功的关键，苹果除了极致的产品设计和工艺设计外，还有一个极致的供应链管理模式，而这一供应链管理模式的缔造者就是现在的CEO库克。</p>

<p>5、<a href="http://www.amazon.cn/s/ref=nb_sb_noss_1?__mk_zh_CN=%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%BD%91%E7%AB%99&amp;url=search-alias%3Daps&amp;field-keywords=%E9%9B%86%E8%A3%85%E7%AE%B1%E6%94%B9%E5%8F%98%E4%B8%96%E7%95%8C">《集装箱改变世界》</a></p>

<blockquote><p>本书从集装箱的发明史娓娓道来，将一个看似平凡的主题衍变成一个个非同寻常的有趣故事，展现了一项技术的进步是如何改变世界经济形态的。它的价值不在于是什么，而在于怎样使用。在集装箱出现之前，美国的沃尔玛、法国的成衣绝对不会遍地开花。而在集装箱出现之后，货运变得如此便宜，以至于某件产品产自东半球，运至纽约销售，远比在纽约近郊生产该产品来得划算。</p></blockquote>

<p>而在上面那本《一只iPhone的全球之旅》中说到苹果供应链管理，若不是有集装箱的出现，应该也是无法实现的。</p>

<p>6、<a href="http://www.amazon.cn/%E4%BA%BA%E7%94%9F%E4%B8%80%E7%9E%AC-%E8%A9%B9%E5%AE%8F%E5%BF%97/dp/B007ZXQJUA/ref=sr_1_1?ie=UTF8&amp;qid=1420267577&amp;sr=8-1&amp;keywords=%E4%BA%BA%E7%94%9F%E4%B8%80%E7%9E%AC">《人生一瞬》</a></p>

<blockquote><p>穿越时间与空间的旅程，往事纷至沓来。詹宏志搜索自己的生命经验，企图从灵光一闪的画面中，建立起私密的个人史。《人生一瞬》分两辑：辑一是生命时间轴下的凝思与追忆，捕捉各个成长阶段难忘的人、事、物，情与景；辑二则是旅程地景上片刻的忘我与不可忘怀，记述游历世界各地如日本、欧美等地的趣闻与所思所感。</p></blockquote>

<p><a href="http://zh.wikipedia.org/wiki/%E8%A9%B9%E5%AE%8F%E5%BF%97">詹宏志</a>是台湾一个传奇人士，他从小对于读书的痴迷深深的震撼到了我，从这本书中你也可以感受到他深厚的的知识积累，国小毕业后将故乡第一间民众设立的小型图书馆全部三、四个书柜的图书读完。姐姐从台中带书回来，要在第二天一早把书放到书店中。不论姐姐在当天多晚回家，詹宏志都会尽量强迫自己在一晚看完所有的书，不管十本、二十本…“就算有二十万本，我都要在一夜间看完，因为你不看，第二天书就走了！” 詹宏志常看到两眼红肿流泪，但他乐此不疲（读到这个我总是在思考，为什么我没有一个这样的姐姐呢？）。这本书的辑二花了很大的篇幅描写作者在日本旅行时看到的美景、吃到的美食，让我对日本这个国家产生了极大的兴趣，特写想去看看他描写的那些美丽的雪景。</p>

<p>7、<a href="http://www.amazon.cn/%E5%90%91%E5%89%8D%E4%B8%80%E6%AD%A5-%E8%B0%A2%E4%B8%BD%E5%B0%94%E2%80%A2%E6%A1%91%E5%BE%B7%E4%BC%AF%E6%A0%BC/dp/B00DMXT594/ref=sr_1_1?ie=UTF8&amp;qid=1420268156&amp;sr=8-1&amp;keywords=%E5%90%91%E5%89%8D%E4%B8%80%E6%AD%A5">《向前一步》</a></p>

<blockquote><p>今天，她奉献上她的最新力作 《向前一步》，深刻地剖析了男女不平等现象的根本原因，解开了女性成功的密码！
她认为，女性之所以没有勇气跻身领导层，不敢放开脚步追求自己的梦想，更多是出于内在的恐惧与不自信。她在书中鼓励所有女性，要大胆地“往桌前坐”，主动参与对话与讨论，说出自己的想法。同时，她还为女性提出了如下成功密码，激励女性勇于接受挑战，满怀热情地追求自己的人生目标。</p></blockquote>

<p>这本书让我第一次了解到女权主义，重新去思考女性在当代社会所做的贡献和牺牲，虽然这本书饱受争议，大部分评论了都是说作者是“站着说话不腰疼”，因为她是Facebook的CFO（首席运营官）。后面，我又听了一个播客节目做的关于女权主义的两期节目，链接已经找不到了，哪天找到了了我再补上。</p>

<p>8、<a href="http://www.amazon.cn/%E8%A2%AB%E5%8A%AB%E6%8C%81%E7%9A%84%E7%A7%81%E7%94%9F%E6%B4%BB-%E8%82%89%E5%94%90%E5%83%A7/dp/B00L33O8A6/ref=sr_1_1?ie=UTF8&amp;qid=1420268505&amp;sr=8-1&amp;keywords=%E8%A2%AB%E5%8A%AB%E6%8C%81%E7%9A%84%E7%A7%81%E7%94%9F%E6%B4%BB">《被劫持的私生活》</a></p>

<blockquote><p>今天，我们的性、婚姻与爱情，看上去是多么自由和私密的世界！其实，真相远非如此。道德、法律、孩子、财产、宗教、国家……每一种力量都参与了对人类私生活的劫持。爱情并不是绝对的信仰。上世纪30年代，英国一个人类学家在非洲考察，他给土著人讲了一个老套的爱情传说：一个王子，爬过玻璃山、穿过大峡谷，又与一条恶龙进行殊死搏斗，终于救出了心爱的姑娘，和她从此过上了幸福的生活。听完故事，土著人面面相觑，最后，他们的长老问：王子为什么不另找一个姑娘呢？</p>

<p>在母系氏族社会，一位美丽却又性冷的女人是不道德的，因为她拒绝用自己的身体来为氏族的兴旺和农作物的丰收做贡献。而在西方中世纪，男人和女人做爱，女人必须裹得严严实实的，只在必需的地方开一个小口。到了近代，事情在起变化，曾经流行“玻璃与水”理论：性交就和口渴时喝水一样。一个年轻姑娘会说，我只是和一个男人睡觉，为什么要爱他呢？
放纵和禁欲都不是办法，今天人类的婚姻世界也早已不再平静，在发达国家，未婚妈妈、单亲家庭越来越多，丁克、丁斯家庭也纷纷出现，父亲和母亲中间牵一个小孩的标准家庭形象，已不再风光如昨。</p></blockquote>

<p>9、<a href="http://www.amazon.cn/%E7%A9%BF%E5%B8%83%E9%9E%8B%E7%9A%84%E9%A9%AC%E4%BA%91-%E5%86%B3%E5%AE%9A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%94%9F%E6%AD%BB%E7%9A%8427%E4%B8%AA%E8%8A%82%E7%82%B9-%E7%8E%8B%E5%88%A9%E8%8A%AC-%E6%9D%8E%E7%BF%94/dp/B00NTQHE4C/ref=sr_1_1?ie=UTF8&amp;qid=1420268636&amp;sr=8-1&amp;keywords=%E7%A9%BF%E5%B8%83%E9%9E%8B%E7%9A%84%E9%A9%AC%E4%BA%91">《穿布鞋的马云:决定阿里巴巴生死的27个节点》</a></p>

<blockquote><p>最熟悉马云的创业者王利芬携手马云最信得过的媒体人李翔，认真梳理阿里巴巴15年的历史，从生死存亡的27个节点提取马云创业的智慧：关于融资、关于团队、关于管理、关于谈判、关于失败、关于企业愿景、关于企业文化、关于战略、关于人才……不鸡血不励志不神话马云，最大限度地接近真实的马云，可能是迄今为止，唯一客观、真实、完整还原马云22年创业史的里程碑作品！！</p></blockquote>

<p>书结尾的这句话深深的触动了我，使命感和价值观其实是我们大部分人所缺失的：</p>

<blockquote><p>一样的学校、一样的工作单位、一样的专业能力，为什么人生的状态如此迥异？其根子上的不同，是每个人使命感的强弱和价值观的差异。这两种东西虽然看不见摸不着，但是时时事事决定着人的选择和判断，而这些选择和判断与人生百态发生着极强的关联性。所以，人与人之间最本质的区别不是技能、专业、能力、情商，而是人生的使命感和价值观，而企业同理。</p></blockquote>

<p>10、<a href="http://www.amazon.cn/%E5%A5%A5%E8%8E%B1%E5%88%A9%E7%9A%84-%E8%AF%8D%E5%AA%92%E4%BD%93-%E5%B8%9D%E5%9B%BD-%E4%B8%9C%E8%A5%BF%E6%96%87%E5%BA%93/dp/B00F4QUAO6/ref=sr_1_1?ie=UTF8&amp;qid=1420268895&amp;sr=8-1&amp;keywords=%E5%A5%A5%E8%8E%B1%E5%88%A9%E7%9A%84%E8%AF%8D%E5%AA%92%E4%BD%93%E5%B8%9D%E5%9B%BD">《奥莱利的词媒体帝国》</a></p>

<blockquote><p>奥莱利媒体不仅被许多人看作是全球领先的计算机图书出版商，而且还多次举办技术专题的峰会。作为其创始人和CEO的蒂姆•奥莱利更是热衷于新兴科技，由他发起的科技热词在全球范围内疯传，「开源」、「Web2.0」、「作为平台的政府」、「参与架构」，每一个都是科技界耳熟能详的概念，其影响力早已不再局限于科技领域。从计算机到工商管理，再到公共管理，整个思想界都被他的时髦用语所征服。奥莱利的「词媒体」帝国已然成形。
然而，所谓的「开放系列」、「2.0系列」之类的概念真的能救人民于水火？盲目膜拜创新与高效真的能所向披靡？奥莱利像一位布道者，永远以美好的未来、炫目的前景，还有光鲜亮丽的词语安慰着我们，但是他真的能够拯救一切吗？</p></blockquote>

<p>这就是媒体的力量，也是媒体的责任！媒体能够制造一个好的时代，也可以毁掉一个好的时代！</p>

<h2>阅读清单</h2>

<p>技术类：</p>

<p>1、《Pro iOS 5 Augmented Reality》</p>

<p>2、《Pro+Git+中文版》</p>

<p>3、《OpenGL ES应用开发实践指南》</p>

<p>科技类：</p>

<p>4、《移动的帝国：日本移动互联网兴衰启示录》</p>

<p>5、《颠覆医疗》</p>

<p>6、《黑天鹅》</p>

<p>7、《计算机：一部历史》</p>

<p>8、《iGod》</p>

<p>9、《奥莱利的词媒体帝国》</p>

<p>10、《周鸿祎自述—我的互联网方法论》</p>

<p>11、《文明》</p>

<p>12、《九败一胜：美团创始人王兴创业十年》</p>

<p>13、《穿布鞋的马云》</p>

<p>14、《跨界：开启互联网与传统行业融合新趋势》</p>

<p>15、《教训：互联网创业必须避免的八大误区》</p>

<p>16、《孵化Twitter:从蛮荒到IPO的狂野旅程》</p>

<p>人文类：</p>

<p>17、《内在的从容》</p>

<p>18、《风中的纸屑》</p>

<p>19、《人与永恒》</p>

<p>20、《被劫持的私生活》</p>

<p>21、《台湾念真情》</p>

<p>22、《这些人，那些事》</p>

<p>23、《我与父辈》</p>

<p>24、《向前一步》</p>

<p>25、《我们台湾这些年》</p>

<p>26、《我幻想着粉碎现有的一切 — 苏珊·桑塔格访谈录》</p>

<p>27、《少年台湾》</p>

<p>28、《人生一瞬》</p>

<p>29、《从你的全世界路过》</p>

<p>30、《安藤忠雄：在建筑中发现梦想》</p>

<p>经济类：</p>

<p>31、《集装箱改变世界》</p>

<p>32、《不止于物流》</p>

<p>管理类：</p>

<p>33、《星巴克体验：为每一个顾客打造个性化服务》</p>

<p>34、《一键下单：杰夫贝佐斯与亚马逊的崛起》</p>

<p>35、《一只iPhone的全球之旅》</p>

<p>营销类：</p>

<p>36、《参与感:小米口碑营销内部手册》</p>

<p>37、《定位》</p>

<p>产品设计：</p>

<p>38、《在你身边，为你设计》</p>

<p>39、《设计之下》</p>

<p>40、《乔纳森传》</p>

<p>游记类：</p>

<p>41、《两个轮子一个岛》</p>

<p>42、《大陆脚游台湾：宝岛各地》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我听的播客]]></title>
    <link href="http://chenHongbin.github.io/blog/2014/05/17/bo-ke/"/>
    <updated>2014-05-17T10:16:09+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2014/05/17/bo-ke</id>
    <content type="html"><![CDATA[<h2>闲言</h2>

<p>写这篇文章的起源是，大概一周前，我在<a href="http://www.itgonglun.com/">it公论</a>Instagram账号上留言，希望主持人分享下他们常听的播客。没想到很快在最近的一期<a href="http://www.itgonglun.com/episodes/62">桌面出版成就了 Mac，什么来成就 iPad？</a>开场里，两位主持人就分享了他们常听的几个播客。所以，想顺着他们的推荐，把自己的常听的几个播客也整理下，分享出来。</p>

<h2>关于我的播客之旅</h2>

<p>我是一个重度的<a href="http://zh.wikipedia.org/wiki/%E6%92%AD%E5%AE%A2">播客(podcast)</a>用户，听播客已经成为了我生活中必不可少的一个习惯。这个习惯的养成要特别的感谢大学宿友金胖，大一刚入学的时候，我是一个极其懵懂无知的少年（现在依然还是很无知的），对于外面世界知之甚少，知识面极度狭隘。刚认识金胖那会儿看着他经常带着耳机，一直以为他是在听歌，后来无意中发现他的MP4里除了一些歌外，还有很大一部分《百家讲坛》之类的音频，他告诉我他收集了一堆的这类音频，经常在坐公交车或者走路的时候听这些。这个事情深深的触动了我，觉得这个行为真的太赞了，我必须学习。于是，我鼓起了勇气向姐姐申请财政拨款，现在已经忘记当初用了什么说辞了，姐姐很快就同意了。（说到此，我得感谢下我姐，我姐是个深明大义的人，她对于我提出的要求，只要是我能够给出一个合理的理由，她都会马上给予支持，从一开始的MP4，到后来学习iOS开发用的iPad、MBP无一例外）于是，我拉着金胖到电子城买了一个OPPO的MP4，从此开始了我的&#8221;播客之旅&#8221;（暂且把那种形式也称为播客吧）</p>

<p>现在已经记不得听的第一个节目具体是什么了，但是，可以肯定的一点是我是从百家讲坛开始听的，《于丹论语心得》、《于丹庄子心得》、《易经的智慧》、《胡雪岩的启示》、《大国的崛起》、《社会的源动力&mdash;经济》等等，也正是为了找这些资源让我发现了VeryCD，然后在上面掏了除了百家讲坛之外的其他的各种各样的音频，有英语学习的、有成功学的、有各种有声电子书，这些东西慢慢的打开了我的视野，更进一步说，这些东西慢慢的让我开始去思考自己的人生，去寻找自己所喜欢的东西，慢慢的让我知道什么是人生观、价值观。印象最深的是听了<a href="http://book.douban.com/subject/3070126/">季羡林自述的《我这一生》</a>这本书，里面的一句话深深的触动了我。</p>

<blockquote><p>我这一生，同别人差不多，阳关大道，独木小桥，都走过跨过，坎坎坷坷，弯弯曲曲，一路走了过来，我曾问过自己一个问题：如果真有那么一个造物主，要加恩于我，让我下一辈子还转生为人，我是不是还走今生的这一盘棋路？经过了一些思虑，我的回答是：还是走这一条路。但是有一个附带条件；让我的脸皮厚一点，让我的心黑一点，让我考虑自己的利益多一点，让我自知之明少一点。</p></blockquote>

<p>看完这本书后，我去图书馆借了这本书，从头到尾认认真真的看了一遍。就这样，我不断的听“播客”、然后通过网络、图书馆查看相应的资料或书籍，从中学到很多知识，事业也渐渐的开阔开来。记得最“上瘾”的时候，我甚至把最喜欢的广播节目《千里共良宵》从网络上下下来，然后一期一期的放到MP4里面去听。也就这样渐渐的养成了习惯。</p>

<p>很可惜的是，在大二下学期去泉州玩的时候，我把那个MP4给弄丢了，因为各种问题，我也没有再听“播客”了，而改成看书、读报纸、杂志了，这又是一个可以值得大写特写的一个经历。</p>

<p>后来，用上了安卓机，本以为又可以过上听“播客”的日子，可是事与愿违，一方面我用的机子是当时的合约机，真心的烂，导入音乐听起来感觉特别的难受，另一方面我找遍了各个应用商店都没有找到一款好用的podcast应用。因此，又只能无奈作罢。直到去年年底，我狠下心把手机换成了iPhone，然后装上了<a href="https://itunes.apple.com/cn/app/podcasts/id525463029?mt=8">Podcasts</a> ，在知乎、百度、Google、Quora查找各种值得听的podcast节目，经过一阵子的试听、筛选，也慢慢的形成了自己的podcast列表。每天，我都是听着播客上下班，有时候因为播客的时间比较长，我还会特地绕远路来听。这种感觉真的超好的！</p>

<p>说了这么多题外话，现在让我们进入重点吧，我在下面把自己喜欢的播客、还有<a href="http://www.itgonglun.com/">it公论</a>上主持人推荐的节目整理下吧。</p>

<h2>本人推荐播客：</h2>

<p>1、<a href="http://www.itgonglun.com/">it公论</a>：主要由字节社创始人李如一和Rio主持，偶尔会邀请一个嘉宾，主要聊一些当前热门的科技话题。</p>

<p>2、<a href="http://dongwu.21cbr.com/">东吴相对论</a>：由梁冬和吴伯凡主持，是一档不错的财经类节目，特别需要说明的是，里面梁冬的笑声真的特夸张。</p>

<p>3、一席：这个是国内版TED &mdash;&ndash; 一席的音频版，每月一期，邀请人文、科技领域有故事、有智识的嘉宾前来分享见解、体验和想象，也可以看他的视频版</p>

<p>4、罗辑思维：这个很明显，就是最火的自媒体&mdash;罗辑思维的音频版，对于我这种人，真的不想看视频，都是听音频的。</p>

<h2>IT公论中推荐的播客(全英文节目，听起来有压力，部分需要翻墙才能收听)：</h2>

<p>1、<a href="http://atp.fm/">Accidental Tech Podcast</a>：科技类，需要翻墙</p>

<p>2、<a href="http://neutral.fm/">Neutral</a>：科技类</p>

<p>3、<a href="http://www.muleradio.net/thetalkshow/">The Talk Show</a>：科技类</p>

<p>4、<a href="http://www.anandtech.com/tag/podcast">The AnandTech Podcast</a>：科技类</p>

<p>5、<a href="http://a16z.com/tag/podcast/">a16z podcast</a></p>

<p>6、<a href="http://cubed.fm/">Cubed</a></p>

<p>7、<a href="http://zhuanlan.zhihu.com/lawrencelry/19753266">Stuff You Should Know</a>：科普类节目</p>

<p>8、<a href="http://ifiwereyoushow.com/">If I Were You</a> ：搞笑节目，需要翻墙</p>

<h2>几个iOS技术类播客</h2>

<p>1、<a href="http://iohyespodcast.com/">iOhYes</a></p>

<p>2、<a href="http://nsbrief.com/">NSBrief</a></p>

<p>3、<a href="http://www.imore.com/debug">Debug</a></p>

<p>4、<a href="http://www.raywenderlich.com/rwpodcast">raywenderlich</a></p>

<h2>最后</h2>

<p>上面推荐的大部分播客都是英语的，对于英语水平极烂的我很多时候都是听不懂的，更多的是去他们的博客上看看每期的内容和相关的文章。</p>

<p>最后推荐一个最近刚入的很不错的播客app <a href="http://castro.fm/">Castro</a> 25块，值得拥有,这是这个软件作者Dan Benjamin说的话。</p>

<blockquote><p>Podcasting apps are so tough to get right. I’ve tried them all, and Castro fits perfectly with the way I like to manage and listen.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[View-Laye协作的学习笔记]]></title>
    <link href="http://chenHongbin.github.io/blog/2014/05/16/view-layexie-zuo-wen-zhang-xue-xi-bi-ji/"/>
    <updated>2014-05-16T07:31:38+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2014/05/16/view-layexie-zuo-wen-zhang-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<h2>闲言</h2>

<p>又到了周五，一周就这样灰溜溜的过去了，想着即将到来的周末还是挺激动的，虽然周日被公司活动无情的占用了，虽然得到晚上9点半后才能回来，虽然。。。。。。</p>

<p>这是我的第三篇博客文章，到目前为止感觉还是挺不错的，挺有冲动写文章的，但是，总是苦于不知道写什么。建这个博客的初衷是为了记录自己的生活、工作和学习。曾经志向远大，1、每读完一本书，就在这上面写一篇读书笔记（今年到现在为了读了十多本，还没写过一篇）2、每看到一篇好的英语博客，都把它翻译到这里来（medium.com已经收藏了一堆的文章、RSS里也藏了一堆、Pocket里也有一堆） 3、每学习新的技术知识就这里写几篇总结文章（最近用Mantle和AF用的巨爽，但是也是没有什么行动）。所以，问题其实也并不是不知道写什么，而是自己略懒，同时，时间管理上还是存在很多问题。但是无论如何，现在已经开始了也为时不晚，就像那天姐夫发给我的正能量说的</p>

<pre><code>人生永远都可以随时开始，关键在于你敢不敢果断的转身；任何事都可能有好结果，重要的是你有没有承受光明到来之前的黑暗
</code></pre>

<p>还有一件事就是，决定以后无论什么文章，都要在最前面加上这个“闲言”栏目，先扯扯人生、谈谈理想、抒发抒发感慨，再板砖（感觉有点像那些饱读成功学书籍的人，在每次出门前都要对着镜子里的自己高喊“我一定可以成功的！我是最棒的！加油！加油！”）。</p>

<h2>正文</h2>

<p>这是一篇学习笔记，来自于这两天学习<a href="http://objccn.io/issue-12-4/">View-Layer 协作</a>这篇文章，这篇是微博上的大神<a href="http://weibo.com/onevcat">@onevcat</a>译自<a href="http://www.objc.io/">objc.io</a>的<a href="http://www.objc.io/issue-12/view-layer-synergy.html">View-Layer Synergy</a>。看完这篇文章后，发现自己的两点问题，</p>

<pre><code> 1、在学习时，动手实践的精神和思考问题的深度还远远不够，往往总是浅尝则止
 2、在学习官方文档的时候粗心大意，细节都被我忽略了，当然，这个跟本人的英语水平也有一定必然的   
    联系，所以，还是多背单词、少睡觉、多查字典、少偷懒。
</code></pre>

<h2>View和Layer的关系</h2>

<p>1、所有的View都是由一个底层的Layer来驱动的，View其实直接从Layer对象中获取了绝大多数他所需要的数据，因此，对于Layer的修改将会自动映射到所对应的View上，所以，你可以通过修改Layer或者View的属性来达到相同的效果；</p>

<p>2、存在单据的Layer，如<a href="https://developer.apple.com/library/mac/documentation/AVFoundation/Reference/AVCaptureVideoPreviewLayer_Class/Reference/Reference.html">AVCaptureVideoPreviewLayer</a> 和 <a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CAShapeLayer_class/Reference/Reference.html">CAShapeLayer</a>，不需要附加到View上就可以在屏幕上显示内容；</p>

<p>3、以上两种情况，都是Layer在起决定作用，但是附加到View上的Layer和单独的Layer在行为上还是稍有不同的。改变一个单独的Layer的任何animatable属性，都会触发一个从旧值过度到新值的默认简单动画，然后如果改变一个View中的Layer的同一个属性，它只会从这一帧直接跳到下一帧，因为当Layer附件到View上时，默认的隐式动画的Layer行为就不起作用了；</p>

<blockquote><p>If you want to use Core Animation classes to initiate animations, you must issue all of your Core Animation calls from inside a view-based animation block. The UIView class disables layer animations by default but reenables them inside animation blocks.</p></blockquote>

<h2>Layer是如何执行动画的？CAAction</h2>

<p>4、无论何时一个可动画的Layer属性改变时，Layer都会寻找并运行合适的‘action’来实行这个改变，在Core Animation的专业术语中把这样的动画统称为动作（<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>）,<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>,从技术上来说，这是一个接口，并可以用来做各种事情。但是实际中，某种程度上你可以只把它理解为用来处理动画。</p>

<p>5、在改变一个Layer的属性，并执行一个动作(<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>)之前，Layer需要找到相应的动作对象(<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>)。当一个恰当的动作事件发生在Layer时，Layer对象调用 <code>actionForKey:</code> 方法来寻找相应的动作对象(<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>)。我们可以在某些节点提供我们需要的特定动作(<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>)。</p>

<p>6、Layer将像文档中所写的那样去寻找(<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>)，整个过程分为五部，第一步为Layer通过向他的delegate发送<code>actionForLayer:forKey:</code> 消息来询问提供一个对象属性变化的<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>, delegate可以通过返回以下三者之一来进行响应：</p>

<pre><code>(1)、返回一个动作对象，这种情况下Layer将使用这个动作。
(2)、返回一个nil, 这样layer会到其它地方继续寻找
(3)、返回一个NSNull对象，告诉layer这里不需要执行一个动作，搜索也会就此结束
</code></pre>

<p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/ReactingtoLayerChanges/ReactingtoLayerChanges.html#//apple_ref/doc/uid/TP40004514-CH7-SW1">Core Animation文档中如此描述:</a></p>

<blockquote><p>Core Animation looks for action objects in the following order:</p>

<p>1、If the layer has a delegate and that delegate implements the actionForLayer:forKey: method, the layer calls that method. The delegate must do one of the following:</p>

<p>·Return the action object for the given key.</p>

<p>·Return nil if it does not handle the action, in which case the search continues.</p>

<p>·Return the NSNull object, in which case the search ends immediately.</p>

<p>2、The layer looks for the given key in the layer’s actions dictionary.</p>

<p>3、The layer looks in the style dictionary for an actions dictionary that contains the key. (In other word, the style dictionary contains an actions key whose value is also a dictionary. The layer looks for the given key in this second dictionary.)</p>

<p>4、The layer calls its defaultActionForKey: class method.</p>

<p>5、The layer performs the implicit action (if any) defined by Core Animation.</p></blockquote>

<h2>UIView的动画Block解析</h2>

<p>7、当Layer在背后支持一个View的时候，View就是它的delegate。在iOS中，如果Layer与一个UIView对象关联时，view就是它的delegate。</p>

<pre><code>“在 iOS 中，如果 layer 与一个 UIView 对象关联时，这个属性必须被设置为持有这个 layer 的那个 view”
</code></pre>

<p>8、属性改变时 layer 会向 view 请求一个动作，而一般情况下 view 将返回一个 NSNull，只有当属性改变发生在动画 block 中时，view 才会返回实际的动作。</p>

<p>9、对于 view 中的 layer 来说，对动作的搜索只会到第一步为止，即返回一个默认动画或者NSNull。</p>

<p>10、插播：值得注意的是打印出的 NSNull 是带着一对尖括号的 (&ldquo;<null>&rdquo;)，这和其他对象一样，而打印 nil 的时候我们得到的是普通括号((null))。</p>

<p>11、当属性在动画block中改变时，view将向layer返回一个基本的动画，然后动画通过通常的addAnimation:forkey:方法被添加到layer中，就像显示地添加动画那样。</p>

<p>输出值：</p>

<pre><code>&lt;CABasicAnimation:0x8c73680; 
  delegate = &lt;UIViewAnimationState: 0x8e91fa0&gt;;
  fillMode = both; 
  timingFunction = easeInEaseOut; 
  duration = 0.3; 
  fromValue = NSPoint: {5, 5}; 
  keyPath = position&gt;
</code></pre>

<p>12、当动画刚被添加到layer时，属性的新值还没有被改变。在构建动画时，只有fromValue被显示地指定了。在<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CABasicAnimation_class/Introduction/Introduction.html">CABasicAnimation的文档</a>中可以看到具体的关于<code>fromeValue</code>、<code>toValue</code>、<code>byValue</code>的值的问题：</p>

<blockquote><p>The fromValue, byValue and toValue properties define the values being interpolated between. All are optional, and no  more than two should be non-nil. The object type should match the type of the property being animated.</p>

<p>The interpolation values are used as follows:</p>

<p>·Both fromValue and toValue are non-nil. Interpolates between fromValue and toValue.</p>

<p>·fromValue and byValue are non-nil. Interpolates between fromValue and (fromValue + byValue).</p>

<p>·byValue and toValue are non-nil. Interpolates between (toValue &ndash; byValue) and toValue.</p>

<p>·fromValue is non-nil. Interpolates between fromValue and the current presentation value of the property.</p>

<p>·toValue is non-nil. Interpolates between the current value of keyPath in the target layer’s presentation layer and toValue.</p>

<p>·byValue is non-nil. Interpolates between the current value of keyPath in the target layer’s presentation layer and that value plus byValue.</p>

<p>·All properties are nil. Interpolates between the previous value of keyPath in the target layer’s presentation layer and the current value of keyPath in the target layer’s presentation layer.</p></blockquote>

<p>13、关于上面输出的delegate，是一个UIViewAnimationState的私有类对象，主要用来维护动画的一些状态，如持续时间、延时、重复次数等等。还负责对一个栈做push和pop,这是为了在多个动画block嵌套时，能够获取正确的动画状态 可以看看<a href="https://github.com/rpetrich/iphoneheaders/blob/master/UIKit/UIViewAnimationState.h">dump出来的头文件</a></p>

<p>14、UIViewAnimationState对象作为UIView返回给Layer的动画的delegate实现了<code>animationDidStart:</code> 和 <code>animationDidStop:finished:</code>方法，并将信息传给了自己的delegate, 这个delegate是一个私有类：UIViewAnimationBlockDelegate，<a href="https://github.com/EthanArbuckle/IOS-7-Headers/blob/master/Frameworks/UIKit.framework/UIViewAnimationBlockDelegate.h">dump出来的头文件</a>，这是一个很小的类，只负责一件事情：响应动画的delegate回调并且执行相应的block。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于CALayer的position和anchorPoint的一点理解]]></title>
    <link href="http://chenHongbin.github.io/blog/2014/05/11/guan-yu-calayerde-positionhe-anchorpointde-%5B%3F%5D-dian-li-jie/"/>
    <updated>2014-05-11T12:13:48+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2014/05/11/guan-yu-calayerde-positionhe-anchorpointde-[?]-dian-li-jie</id>
    <content type="html"><![CDATA[<h2>闲言</h2>

<p>翻看记录，发现自从3月底搭建完这个blog写了第一篇文章后，就再也没有写过任何东西了，只能在心底强烈的鄙视自己一番。鉴于最近在新项目中学到不少东西，同时，发现很多东西没有掌握，所以计划在接下来的一段时间内，好好学习，偶尔记录，希望能多写点东西。</p>

<h2>关于CALayer</h2>

<p>在Core Animation中最基本也是最重要的内容就是CALayer，每个UIView都有一个CALayer对象。CALayer在很多方面与UIView非常相似。它拥有位置、大小、变形和内容。但是CALayer并不是用来替代UIView对象的，相反，它是和UIView一起协作的。UIView是一个很重量级的对象，它管理绘制与事件处理（尤其是触摸事件），CALayer则完全关乎绘制，UIView依靠CALayer来管理绘制，通过这样的分工两者就能协作的更好。</p>

<h2>CALayer的几何属性</h2>

<p>就像前面说的，CALayer拥有自己的位置（position）、大小(bounds,frame)、变形(transform)和内容(content)，同时，它还拥有一个UIView所没有的属性anchorPoint。其中position、bounds、frame是基于点坐标系的（point-based coordinate systems），而anchorPoint是基于单元坐标系的（unit coordinate systems），即X坐标和Y坐标的取值在0-1之间。bounds和frame的意思比较好理解，farme为CALayer在其父层（superLayer）上的位置和大小，而bounds则是可以简单理解为CALayer的大小，其X坐标和Y坐标为0。剩下的position和anchorPoint则是最容易让人困惑的。</p>

<h2>position</h2>

<p>在CALayer.h文件中我们可以看到:</p>

<pre><code>/* The position in the superlayer that the anchor point of the layer's
 * bounds rect is aligned to. Defaults to the zero point. Animatable. */

@property CGPoint position;
</code></pre>

<p>即position是CALayer的anchorPoint在其父层（superLayer）的关联位置。</p>

<h2>anchorPoint</h2>

<p>同样，在CALayer.h文件中我们可以看到:</p>

<pre><code>/* Defines the anchor point of the layer's bounds rect, as a point in
 * normalized layer coordinates - '(0, 0)' is the bottom left corner of
 * the bounds rect, '(1, 1)' is the top right corner. Defaults to
 * '(0.5, 0.5)', i.e. the center of the bounds rect. Animatable. */

 @property CGPoint anchorPoint;
</code></pre>

<p>即anchorPoint的值是相对bounds的比例值来确定的，在坐标系的左上角和右下角anchorPoint的值分别为（0，0）和（1，1），需要注意点是，文档中说的是左下角和右上角，这是在OS X上，iOS与OS X相反。anchorPoint的默认值为（0.5，0.5）即CALayer的中心位置。</p>

<p>接下来看下面两张图，只看iOS部分即可，</p>

<p><img src="http://chenHongbin.github.io/images/2014-05-10-anchor/layer_coords_anchorpoint_position_2x.png" title="ahchor1" alt="Alt ahchor1" /></p>

<p>图1</p>

<p><img src="http://chenHongbin.github.io/images/2014-05-10-anchor/anchorpoint2.jpg" title="ahchor2" alt="Alt ahchor2" /></p>

<p>图2</p>

<p>在图1中，我们可以看到，position的值是anchorPoint点在superLayer中的坐标位置。所以position点是相对于superLayer的，而anchorPoint点是相对于CALayer本身的。两者是相对不同的坐标空间的一个重合点。</p>

<p>在图2中，我们可以看到，anchorPoint的作用，其实是在CALayer做动画时的一个锚点，所有的变化是以anchorPoint为锚点进行的，相同的动画，不同的锚点，效果是全然不同的。具体的描述可以看<a href="http://wonderffee.github.io/blog/2013/10/13/understand-anchorpoint-and-position/">彻底理解position与anchorPoint</a>这篇博文。</p>

<h2>anchorPoint、position和frame之间的关系</h2>

<p>在官方的<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html">Core Animation文档中</a>有这样的一句话：</p>

<blockquote><p> The bounds defines the coordinate system of the layer itself and encompasses the layer’s size on the screen. The position property defines the location of the layer relative to its parent’s coordinate system. Although layers have a frame property, that property is actually derived from the values in the bounds and position properties and is used less frequently.</p></blockquote>

<p>也就是说CALayer的frame是由CALayer的bounds属性和position属性确定的，bounds决定大小，position决定位置</p>

<pre><code> frame.origin.x = position.x - anchorPoint.x * bounds.size.width;
 frame.origin.y = position.y - anchorPoint.y * bounds.size.height;
 frame.size.width  = bounds.size.width;
 frame.size.height = bounds.size.height;
</code></pre>

<p>为此我写了一段测试代码</p>

<pre><code>CALayer *testLayer = [[CALayer alloc] init];
testLayer.frame = (CGRect){
    .origin.x = 10,
    .origin.y = 10,
    .size.width =  100,
    .size.height = 100
};
testLayer.backgroundColor = [UIColor redColor].CGColor;
[self.view.layer addSublayer:testLayer];

NSLog(@"testLayer frame = %@",NSStringFromCGRect(testLayer.frame));
NSLog(@"testLayer bounds = %@",NSStringFromCGRect(testLayer.bounds));
NSLog(@"testLayer position = %@",NSStringFromCGPoint(testLayer.position));
NSLog(@"testLayer anchorPoint = %@",NSStringFromCGPoint(testLayer.anchorPoint));

NSLog(@"\n");
NSLog(@"Change Position(20, 20)");
testLayer.position = CGPointMake(20, 20);

NSLog(@"testLayer frame = %@",NSStringFromCGRect(testLayer.frame));
NSLog(@"testLayer bounds = %@",NSStringFromCGRect(testLayer.bounds));
NSLog(@"testLayer position = %@",NSStringFromCGPoint(testLayer.position));
NSLog(@"testLayer anchorPoint = %@",NSStringFromCGPoint(testLayer.anchorPoint));


NSLog(@"\n");
NSLog(@"Change anchorPoint(0.4, 0.4)");
testLayer.anchorPoint = CGPointMake(0.4, 0.4);

NSLog(@"testLayer frame = %@",NSStringFromCGRect(testLayer.frame));
NSLog(@"testLayer bounds = %@",NSStringFromCGRect(testLayer.bounds));
NSLog(@"testLayer position = %@",NSStringFromCGPoint(testLayer.position));
NSLog(@"testLayer anchorPoint = %@",NSStringFromCGPoint(testLayer.anchorPoint))
</code></pre>

<p>其输出为：</p>

<pre><code>testLayer frame = ((10, 10), (100, 100))
testLayer bounds = ((0, 0), (100, 100))
testLayer position = (60, 60)
testLayer anchorPoint = (0.5, 0.5)

Change Position(20, 20)
testLayer frame = ((-30, -30), (100, 100))
testLayer bounds = ((0, 0), (100, 100))
testLayer position = (20, 20}
testLayer anchorPoint = (0.5, 0.5)

Change anchorPoint(0.4, 0.4)
testLayer frame = ((-20, -20), (100, 100))
testLayer bounds = ((0, 0), (100, 100))
testLayer position = (20, 20)
testLayer anchorPoint = (0.40000001, 0.40000001)
</code></pre>

<p>从中我们可以验证我们之前的公式是正确的，即frame的origin是由position和anchorPoints共同决定的，而frame的size则是由bounds决定的。</p>

<p>另外一个问题就是，单方面修改layer的position位置或者是anchorPoint，其两者互不影响，受影响的只会是frame.origin，也就是layer坐标原点相对superLayer会有所改变。</p>

<p>最后，在<a href="http://wonderffee.github.io/blog/2013/10/13/understand-anchorpoint-and-position/">彻底理解position与anchorPoint</a>这篇博文的有说到一点，</p>

<blockquote><p>Apple doc中还有一句描述是这样的：</p>

<blockquote><p>When you specify the frame of a layer, position is set relative to the anchor point. When you specify the position of the layer, bounds is set relative to the anchor point.</p></blockquote>

<p>大意是：当你设置图层的frame属性的时候，position根据锚点（anchorPoint）的值来确定，而当你设置图层的>position属性的时候，bounds会根据锚点(anchorPoint)来确定。
这段翻译的上半句根据前面的公式容易理解，后半句可能就有点令人迷惑了，当修改position时，bounds的width与>height会随之修改吗？其实,position是点，bounds是矩形，根据锚点(anchorPoint)来确定的只是它们的位置，而不>是内部属性。所以，上面这段英文这么翻译就容易理解了：</p>

<blockquote><p>当你设置图层的frame属性的时候，position点的位置（也就是position坐标）根据锚点（anchorPoint）的值来确 定，而当你设置图层的position属性的时候，bounds的位置（也就是frame的orgin坐标）会根据锚点(anchorPoint)来确定</p></blockquote></blockquote>

<h2>最后</h2>

<p>终于完成第一篇技术博客，发现确实写文章和写代码很像，对于如何提高自己的思路和条理有大帮助，应该好好把握，多写写，哈哈！</p>

<h3>参考</h3>

<ul>
<li><p><a href="http://wonderffee.github.io/blog/2013/10/13/understand-anchorpoint-and-position/">彻底理解position与anchorPoint</a></p></li>
<li><p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html">Core Animation Programming Guide</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你好！我的第一篇博客]]></title>
    <link href="http://chenHongbin.github.io/blog/2014/03/22/ni-hao-%21wo-de-di-%5B%3F%5D-pian-bo-ke/"/>
    <updated>2014-03-22T12:13:48+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2014/03/22/ni-hao-!wo-de-di-[?]-pian-bo-ke</id>
    <content type="html"><![CDATA[<pre><code>发现很多时候，自己有很多想法、很多想要的事，但是却总是停留在“想”上面，行动一直跟不上。
</code></pre>

<p>我一直是一个&#8221;跟风型&#8221;的人，每次看到别人身上有什么优点，而这个优点又是适合我的，我势必想尽办法复制过来为我所用，无论是大学时候听百家讲坛、看报纸、看杂志，还是毕业后坚持看书的习惯，都是我从身边的朋友、或者所崇拜的人那里复制学习而来，然后慢慢的将其变成自己的习惯。写博客，一直是很多技术大牛所极力推荐和践行的学习方法和生活方式，所以我也一直想搞一个自己的博客来记录自己的工作、学习和生活，当然最原始的动机还是因为很多大牛说，通过写技术博客可以大大提高自己的技术水平。（哈哈 想想功利性太强了哈）</p>

<p>最开始有在网易博客写了几篇技术文章，其实也不算是写，那个时候是菜鸟中的彩鸟，（显然现在也还是菜鸟）只是做了一个搬运工，把别人的写好的给搬运到自己的博客下，后来没坚持多久就没写了，主要是很不喜欢网易博客的风格，广告一堆一堆的，看了真心烦。后来，加入了一个开发群，里面的一个大牛说可以用一个叫Octopress搭建一个Github的博客，当时，那个心情跟哥伦布大哥发现新大陆的心情应该是一样的。然后，立刻到他的博客上去看他的那篇介绍文字，看完后，我得心也凉了，里面太多的技术词不懂，看的云里来雾里去，还说要有一个自己的ip地址，本来就没什么信心的我，在没有任何尝试的情况下就放弃。后面，也常看到别人发到微博上关于搭建博客的教程，大都也是收藏了，然后就没有然后（原来我真的是三分钟热度的人哦）。</p>

<p>直到最近看了<a href="http://nathanmarz.com/blog/you-should-blog-even-if-you-have-no-readers.html">You should blog even if you have no readers</a>和<a href="http://www.vaikan.com/developer-road-the-list/">如何成为一名程序员:我的道路</a>这两篇文章，重新激起了我搭建一个自己的博客的想法。我觉得这次无论如何都要成功。于是，这两天利用空闲时间，根据破船大哥的文章<a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">利用Octopress搭建一个Github博客</a>搭建了这个博客，结果发现之前所想象的困难，都是自己吓自己而已，虽然对于git和markdown都不是很了解，但是按照网上的参考资料一步一步来，很容易就能搭建好了。很多时候，并不是困难把我们吓到了，而是我们自己把自己吓倒了，就想阿甘的妈妈说的：“人生就像一盒混着各种口味的巧克力，你不吃下去，永不都不知道下一个巧克力是什么味道”（好像这句话根本不是这样的，忽略吧）</p>
]]></content>
  </entry>
  
</feed>
