<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Robert_Chen(陈宏彬)]]></title>
  <link href="http://chenHongbin.github.io/atom.xml" rel="self"/>
  <link href="http://chenHongbin.github.io/"/>
  <updated>2015-01-03T21:45:56+08:00</updated>
  <id>http://chenHongbin.github.io/</id>
  <author>
    <name><![CDATA[陈宏彬]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2014我读过的最好的10本书]]></title>
    <link href="http://chenHongbin.github.io/blog/2015/01/03/2014wo-du-guo-de-zui-hao-de-10ben-shu/"/>
    <updated>2015-01-03T11:41:17+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2015/01/03/2014wo-du-guo-de-zui-hao-de-10ben-shu</id>
    <content type="html"><![CDATA[<h2>闲言</h2>

<p>2014年结束了，看着网上各种2014年的回顾、总结，我也觉得应该写点东西回顾、总结下自己的2014。考虑了几次后，决定用三篇文章来回顾自己的2014，分别为:</p>

<p>1、2014我读过的最好的10本书</p>

<p>2、2014我用过的最好的10个App</p>

<p>3、2014我拍的10张最有意义的照片</p>

<p>本篇是这个回顾系列的第一篇文章，回顾下我在2014年的阅读情况。</p>

<h2>前言</h2>

<p>先谈谈我个人对于阅读的理解。</p>

<p>首先，我一向觉得阅读清单跟你手机里的歌曲列表、所装的App一样是一件很私密的东西，因为通过这些可以看到一个人的兴趣爱好、一个人的精神生活、一个人的品味等等，当然，这些兴趣爱好、品味是没有高低贵贱之分的，这也是我觉得阅读的可贵之处，因为它代表了一种平等、一种自由，无论你是什么人、在社会处于什么样的地位，你都可以通过阅读得到快乐、得到知识。也是基于私密的这个考虑，平常时，我是不爱跟别人推荐书单的，因为深怕因为兴趣爱好上的不同而浪费了别人的时间，甚至让别人失去阅读兴趣（当然这个明显是我想多来了）。</p>

<p>其次，是关于为什么阅读？我的阅读史并不长，大学之前的阅读量约等于0，大学四年的阅读量应该不超过20本，毕业后，因为对移动互联网的兴趣，所以每天的业余时间大部分都花在看各种科技报道上，在某一段时间，突然感觉那些报道并没有真正的回答清楚这些事件背后的原因、历史、文化等等我所关心的问题，简单说他没有回答清楚“为什么？”。于是，我开始阅读与科技相关的书，这算是我阅读的开始，后面慢慢的开始接触其它类别的书，人文类、管理类、产品设计类等等，在今年，在准备骑车环台湾岛（这是我今年做的最有意义的事）的过程中，第一次接触到了游记类的书。这是我最开始的动机，但是随着人的成长，“为什么阅读”的答案也在不断的改变着，对于今天的我原因有二：一是通过阅读探索未知的世界，探索我所好奇的知识，二是信息爆炸的如今，我们能够阅读的时间并没有增加，但是资讯量却不断的增加。通过阅读我可以不断提高自己甄别信息的能力，可以有效地提取自己需要的知识。当然，我相信过几年后，这个问题的答案应该不一样了。</p>

<h2>阅读总结</h2>

<p>先说说我阅读的工具。</p>

<p>首先，最值得一提的是，在3月份的时候我买了一台 <a href="http://www.amazon.cn/gp/product/B00JG8FMO6/ref=fs_kpwp">Kindle Paperwhite 2</a>,它是我在2014年的阅读主力工具，当然在接下来几年这地位应该是不会改变的，同时我也在不遗余力的帮它做推广。关于它的各种测评、体验报告网络上已一堆，这里我就说说我最直观的一点感受，就是大部分我想要买的书的电子书版本都可以在亚马逊上买到，而在多看、豆瓣等地方就会经常遇到买不到的情况，我很需要一个大一统的东西。</p>

<p>其次，除了Kindle，<a href="https://itunes.apple.com/us/app/kindle-read-books-ebooks-magazines/id302584613?mt=8">Kindle for iOS</a>、<a href="http://www.duokan.com">多看</a>是我阅读电子书的第二选择。不过今年在多看上看的书好像就只有1本，这本书还是因为它是小米的副总裁黎万强写的，所以在多看上首发了，亚马逊过了好久才有。</p>

<p>最后，纸质书，今年买的纸质书主要有两类，一类是技术类书籍，总是觉得技术书的电子版排版都做的很差，尤其是代码，所以对于技术书我大部分都选择买纸质书，第二类是，买不到电子书版本的书，这些书真的是让人又爱又恨，很长一段时间我都觉得“不出电子书的纸质书都是在耍流氓”，尤其是在搬家的时候。</p>

<p>书籍方面，在量上，2014年我总共读了42本书（书单在文章的最后），离自己在14年年初定下的100本书的目标差距有点大（我在写到这边的时候，狠狠的打了自己5下脸），出现这个问题的主要原因是，我在14年年初定这个目标的时候，并没有根据自己的实际阅读能力和阅读时间来做预估，而是脑袋一热、不假思索的一拍大腿就把100当作14年的目标阅读数量。至于15年的目标，在我经过认真、严谨、谨慎的评估和思考后，数量将定在60本，也就是每个月5本，平均一周一本左右。如果再没有完成，我就录个我打脸的视频放在这上面！！</p>

<p>在质上，2014年读完42本书后，我写了0篇读后感，只是简单的在书本中画画线、做做标注，偶尔会在印象笔记中摘抄几段书中的段落、观点等。出现这个情况是意料之外、情理之中！意料之外是，我之前搭建这个博客的目的之一就是想偶尔写一些觉得不错的书的读后感，按照之前的计划至少应该有5篇的，结果是0篇。情理之中是，我一直以为当前对于我的主要问题是阅读数量上的问题，所以我把写读后感这件事放在了一个很次要、很次要的地位，觉得达到一定的量后，我才能开始写读后感。每次读完一本书后，我就马上开始看第二本书，没有给自己点的时间去思考、去做些读书笔记去沉淀、内化那些知识。所以，在接下来的15年里，阅读量依然是我追求的，同时要求自己坚持每个月写一篇读后感，在读完每本书后，尽量利用思维导图来思考、回顾每本书的内容。希望16年年初写15年总结的时候不要再打脸了。</p>

<h2>最好的10本书</h2>

<p>正如前面所说的，我个人不喜欢向别人推荐书单，在这里仅仅是出于对自己过去一年的阅读所做的总结，没有任何推荐之意！所以，如果你们因为看到我的这篇文章才去阅读这里所提到的书，然后发现不符合你的口味，发现浪费了你的时间的时候，我不负任何责任！这里的总结大部分来自亚马逊里相应的书籍介绍和评论，我只是做一个搬运工，然后牢骚几句！</p>

<p>1、<a href="http://www.amazon.cn/%E5%9C%A8%E5%BB%BA%E7%AD%91%E4%B8%AD%E5%8F%91%E7%8E%B0%E6%A2%A6%E6%83%B3-%E5%AE%89%E8%97%A4%E5%BF%A0%E9%9B%84/dp/B00OH78VJO/ref=sr_1_1?ie=UTF8&amp;qid=1420265470&amp;sr=8-1&amp;keywords=%E5%AE%89%E8%97%A4%E5%BF%A0%E9%9B%84%EF%BC%9A%E5%9C%A8%E5%BB%BA%E7%AD%91%E4%B8%AD%E5%8F%91%E7%8E%B0%E6%A2%A6%E6%83%B3">《安藤忠雄：在建筑中发现梦想》</a></p>

<blockquote><p>我认为建筑的原点正是住宅。住宅起源于人类最根本的欲望，忠实地呈现出长久居住在当地的人们的生活与气候风 土。探访世界各地的本土性住宅时，有时也会遇到出人意表 的展示性建筑，让我重新体验到人类生活的复杂多样。以现 代价值观来看，地方性住宅看起来或许是前现代又非理性的。 但是，我却从那里感受到人们蓬勃的生气、对居住的强烈渴 望所产生的力量，以及活在现代的我们居住环境中所没有的质朴内涵</p></blockquote>

<p>对于这本书，我觉得你甚至都不需要去理解书中说到的那些理论、那些建筑术语、那些建筑大师，只需要把书本中提到的建筑在Google中一一搜索过去，看看那些建筑的照片，你就会感受到建筑的力量，感受到起源于欧洲（书中提到的经典建筑大部分是欧洲的，提到中国的建筑貌似只有唯一的福建土楼）的现代文明的张力，感受到建筑和自然结合的那种美，可惜在我们身边似乎很难找到那种建筑。</p>

<p>2、<a href="http://www.amazon.cn/%E8%AE%BE%E8%AE%A1%E4%B9%8B%E4%B8%8B-%E6%90%9C%E7%8B%90%E6%96%B0%E9%97%BB%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E8%AE%BE%E8%AE%A1-%E6%90%9C%E7%8B%90%E6%96%B0%E9%97%BB%E5%AE%A2%E6%88%B7%E7%AB%AFUED%E5%9B%A2%E9%98%9F/dp/B00HUA52T2/ref=sr_1_1?ie=UTF8&amp;qid=1420266390&amp;sr=8-1&amp;keywords=%E8%AE%BE%E8%AE%A1%E4%B9%8B%E4%B8%8B">《设计之下：搜狐新闻客户端的用户体验设计》</a></p>

<blockquote><p>形而上者谓之道，形而下者谓之器。匠者，器也。处身平凡的匠人不断追求向上的设计之道</p></blockquote>

<p>没有花哨的语言，华丽的外衣，只是将实实在在的流程与方法裸裎给大家。写在书中的是搜狐新闻客户端UED团队一线经验的总结，不仅有很多设计细节案例，更有对用户体验设计的思考和感悟，以及设计人员与产品、开发、运营及市场人员沟通的方法和技巧。</p>

<p>3、<a href="http://www.amazon.cn/%E5%AE%9A%E4%BD%8D-%E6%9C%89%E5%8F%B2%E4%BB%A5%E6%9D%A5%E5%AF%B9%E7%BE%8E%E5%9B%BD%E8%90%A5%E9%94%80%E5%BD%B1%E5%93%8D%E6%9C%80%E5%A4%A7%E7%9A%84%E8%A7%82%E5%BF%B5-%E9%98%BF%E5%B0%94%C2%B7%E9%87%8C%E6%96%AF/dp/B009WMBV9Q/ref=sr_1_1?ie=UTF8&amp;qid=1420266662&amp;sr=8-1&amp;keywords=%E5%AE%9A%E4%BD%8D">《定位》</a></p>

<p>在我们做产品的过程中，这几个问题一直是我们思考的：目标用户是谁？ 是什么？ 提供什么价值？为什么能提供这个价值？这本有史以来对美国营销影响最大的观念的书就是回答你如何去寻找这些问题的答案的书，当然这是一本偏理论的书，所以的东西还是要根据具体的问题具体的分析的，所有的理论只有落实到实践中，产生真真确确的结果才是重点。</p>

<p>4、<a href="http://www.amazon.cn/%E4%B8%80%E5%8F%AAiPhone%E7%9A%84%E5%85%A8%E7%90%83%E4%B9%8B%E6%97%85-%E6%9B%BE%E8%88%AA/dp/B00871MNKY/ref=sr_1_1?ie=UTF8&amp;qid=1420267133&amp;sr=8-1&amp;keywords=%E4%B8%80%E5%8F%AAiPhone%E7%9A%84%E5%85%A8%E7%90%83%E4%B9%8B%E6%97%85">《一只iPhone的全球之旅》</a></p>

<blockquote><p>讲述了iPhone幕后的故事。苹果的iPhone手机在美国设计，在日本制造关键零部件，由韩国制造最核心的芯片和显示屏，由台湾厂商供应另外一些零部件，最后在深圳的富士康工厂里组装，然后空运到美国，再被苹果商店门口排队的华人买走，走私回中国，然后卖到中国各地，然后又被深圳的手机作坊回收翻新再出售，最后被当作电子垃圾拆解回收……本书作者曾航遍访了全球二十多家苹果供应商和合作伙伴，实地到日本、韩国，中国台湾、中国香港、深圳、苏州、长沙等地的苹果供应链走访，跟踪了一只iPhone的一生，还原出iPhone从设计、零部件制造、组装、运输、销售、走私、再销售、回收翻新直到被分解处理的全球之旅。</p></blockquote>

<p>《一只iPhone的全球之旅》揭示了苹果在乔布斯之外的强大竞争力，读完《一只iPhone的全球之旅》这本书，你会发现乔布斯并不是神，他背后的幕僚和众多合作伙伴，同样是苹果成功的关键，苹果除了极致的产品设计和工艺设计外，还有一个极致的供应链管理模式，而这一供应链管理模式的缔造者就是现在的CEO库克。</p>

<p>5、<a href="http://www.amazon.cn/s/ref=nb_sb_noss_1?__mk_zh_CN=%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%BD%91%E7%AB%99&amp;url=search-alias%3Daps&amp;field-keywords=%E9%9B%86%E8%A3%85%E7%AE%B1%E6%94%B9%E5%8F%98%E4%B8%96%E7%95%8C">《集装箱改变世界》</a></p>

<blockquote><p>本书从集装箱的发明史娓娓道来，将一个看似平凡的主题衍变成一个个非同寻常的有趣故事，展现了一项技术的进步是如何改变世界经济形态的。它的价值不在于是什么，而在于怎样使用。在集装箱出现之前，美国的沃尔玛、法国的成衣绝对不会遍地开花。而在集装箱出现之后，货运变得如此便宜，以至于某件产品产自东半球，运至纽约销售，远比在纽约近郊生产该产品来得划算。</p></blockquote>

<p>而在上面那本《一只iPhone的全球之旅》中说到苹果供应链管理，若不是有集装箱的出现，应该也是无法实现的。</p>

<p>6、<a href="http://www.amazon.cn/%E4%BA%BA%E7%94%9F%E4%B8%80%E7%9E%AC-%E8%A9%B9%E5%AE%8F%E5%BF%97/dp/B007ZXQJUA/ref=sr_1_1?ie=UTF8&amp;qid=1420267577&amp;sr=8-1&amp;keywords=%E4%BA%BA%E7%94%9F%E4%B8%80%E7%9E%AC">《人生一瞬》</a></p>

<blockquote><p>穿越时间与空间的旅程，往事纷至沓来。詹宏志搜索自己的生命经验，企图从灵光一闪的画面中，建立起私密的个人史。《人生一瞬》分两辑：辑一是生命时间轴下的凝思与追忆，捕捉各个成长阶段难忘的人、事、物，情与景；辑二则是旅程地景上片刻的忘我与不可忘怀，记述游历世界各地如日本、欧美等地的趣闻与所思所感。</p></blockquote>

<p><a href="http://zh.wikipedia.org/wiki/%E8%A9%B9%E5%AE%8F%E5%BF%97">詹宏志</a>是台湾一个传奇人士，他从小对于读书的痴迷深深的震撼到了我，从这本书中你也可以感受到他深厚的的知识积累，国小毕业后将故乡第一间民众设立的小型图书馆全部三、四个书柜的图书读完。姐姐从台中带书回来，要在第二天一早把书放到书店中。不论姐姐在当天多晚回家，詹宏志都会尽量强迫自己在一晚看完所有的书，不管十本、二十本…“就算有二十万本，我都要在一夜间看完，因为你不看，第二天书就走了！” 詹宏志常看到两眼红肿流泪，但他乐此不疲（读到这个我总是在思考，为什么我没有一个这样的姐姐呢？）。这本书的辑二花了很大的篇幅描写作者在日本旅行时看到的美景、吃到的美食，让我对日本这个国家产生了极大的兴趣，特写想去看看他描写的那些美丽的雪景。</p>

<p>7、<a href="http://www.amazon.cn/%E5%90%91%E5%89%8D%E4%B8%80%E6%AD%A5-%E8%B0%A2%E4%B8%BD%E5%B0%94%E2%80%A2%E6%A1%91%E5%BE%B7%E4%BC%AF%E6%A0%BC/dp/B00DMXT594/ref=sr_1_1?ie=UTF8&amp;qid=1420268156&amp;sr=8-1&amp;keywords=%E5%90%91%E5%89%8D%E4%B8%80%E6%AD%A5">《向前一步》</a></p>

<blockquote><p>今天，她奉献上她的最新力作 《向前一步》，深刻地剖析了男女不平等现象的根本原因，解开了女性成功的密码！
她认为，女性之所以没有勇气跻身领导层，不敢放开脚步追求自己的梦想，更多是出于内在的恐惧与不自信。她在书中鼓励所有女性，要大胆地“往桌前坐”，主动参与对话与讨论，说出自己的想法。同时，她还为女性提出了如下成功密码，激励女性勇于接受挑战，满怀热情地追求自己的人生目标。</p></blockquote>

<p>这本书让我第一次了解到女权主义，重新去思考女性在当代社会所做的贡献和牺牲，虽然这本书饱受争议，大部分评论了都是说作者是“站着说话不腰疼”，因为她是Facebook的CFO（首席运营官）。后面，我又听了一个播客节目做的关于女权主义的两期节目，链接已经找不到了，哪天找到了了我再补上。</p>

<p>8、<a href="http://www.amazon.cn/%E8%A2%AB%E5%8A%AB%E6%8C%81%E7%9A%84%E7%A7%81%E7%94%9F%E6%B4%BB-%E8%82%89%E5%94%90%E5%83%A7/dp/B00L33O8A6/ref=sr_1_1?ie=UTF8&amp;qid=1420268505&amp;sr=8-1&amp;keywords=%E8%A2%AB%E5%8A%AB%E6%8C%81%E7%9A%84%E7%A7%81%E7%94%9F%E6%B4%BB">《被劫持的私生活》</a></p>

<blockquote><p>今天，我们的性、婚姻与爱情，看上去是多么自由和私密的世界！其实，真相远非如此。道德、法律、孩子、财产、宗教、国家……每一种力量都参与了对人类私生活的劫持。爱情并不是绝对的信仰。上世纪30年代，英国一个人类学家在非洲考察，他给土著人讲了一个老套的爱情传说：一个王子，爬过玻璃山、穿过大峡谷，又与一条恶龙进行殊死搏斗，终于救出了心爱的姑娘，和她从此过上了幸福的生活。听完故事，土著人面面相觑，最后，他们的长老问：王子为什么不另找一个姑娘呢？</p>

<p>在母系氏族社会，一位美丽却又性冷的女人是不道德的，因为她拒绝用自己的身体来为氏族的兴旺和农作物的丰收做贡献。而在西方中世纪，男人和女人做爱，女人必须裹得严严实实的，只在必需的地方开一个小口。到了近代，事情在起变化，曾经流行“玻璃与水”理论：性交就和口渴时喝水一样。一个年轻姑娘会说，我只是和一个男人睡觉，为什么要爱他呢？
放纵和禁欲都不是办法，今天人类的婚姻世界也早已不再平静，在发达国家，未婚妈妈、单亲家庭越来越多，丁克、丁斯家庭也纷纷出现，父亲和母亲中间牵一个小孩的标准家庭形象，已不再风光如昨。</p></blockquote>

<p>9、<a href="http://www.amazon.cn/%E7%A9%BF%E5%B8%83%E9%9E%8B%E7%9A%84%E9%A9%AC%E4%BA%91-%E5%86%B3%E5%AE%9A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%94%9F%E6%AD%BB%E7%9A%8427%E4%B8%AA%E8%8A%82%E7%82%B9-%E7%8E%8B%E5%88%A9%E8%8A%AC-%E6%9D%8E%E7%BF%94/dp/B00NTQHE4C/ref=sr_1_1?ie=UTF8&amp;qid=1420268636&amp;sr=8-1&amp;keywords=%E7%A9%BF%E5%B8%83%E9%9E%8B%E7%9A%84%E9%A9%AC%E4%BA%91">《穿布鞋的马云:决定阿里巴巴生死的27个节点》</a></p>

<blockquote><p>最熟悉马云的创业者王利芬携手马云最信得过的媒体人李翔，认真梳理阿里巴巴15年的历史，从生死存亡的27个节点提取马云创业的智慧：关于融资、关于团队、关于管理、关于谈判、关于失败、关于企业愿景、关于企业文化、关于战略、关于人才……不鸡血不励志不神话马云，最大限度地接近真实的马云，可能是迄今为止，唯一客观、真实、完整还原马云22年创业史的里程碑作品！！</p></blockquote>

<p>书结尾的这句话深深的触动了我，使命感和价值观其实是我们大部分人所缺失的：</p>

<blockquote><p>一样的学校、一样的工作单位、一样的专业能力，为什么人生的状态如此迥异？其根子上的不同，是每个人使命感的强弱和价值观的差异。这两种东西虽然看不见摸不着，但是时时事事决定着人的选择和判断，而这些选择和判断与人生百态发生着极强的关联性。所以，人与人之间最本质的区别不是技能、专业、能力、情商，而是人生的使命感和价值观，而企业同理。</p></blockquote>

<p>10、<a href="http://www.amazon.cn/%E5%A5%A5%E8%8E%B1%E5%88%A9%E7%9A%84-%E8%AF%8D%E5%AA%92%E4%BD%93-%E5%B8%9D%E5%9B%BD-%E4%B8%9C%E8%A5%BF%E6%96%87%E5%BA%93/dp/B00F4QUAO6/ref=sr_1_1?ie=UTF8&amp;qid=1420268895&amp;sr=8-1&amp;keywords=%E5%A5%A5%E8%8E%B1%E5%88%A9%E7%9A%84%E8%AF%8D%E5%AA%92%E4%BD%93%E5%B8%9D%E5%9B%BD">《奥莱利的词媒体帝国》</a></p>

<blockquote><p>奥莱利媒体不仅被许多人看作是全球领先的计算机图书出版商，而且还多次举办技术专题的峰会。作为其创始人和CEO的蒂姆•奥莱利更是热衷于新兴科技，由他发起的科技热词在全球范围内疯传，「开源」、「Web2.0」、「作为平台的政府」、「参与架构」，每一个都是科技界耳熟能详的概念，其影响力早已不再局限于科技领域。从计算机到工商管理，再到公共管理，整个思想界都被他的时髦用语所征服。奥莱利的「词媒体」帝国已然成形。
然而，所谓的「开放系列」、「2.0系列」之类的概念真的能救人民于水火？盲目膜拜创新与高效真的能所向披靡？奥莱利像一位布道者，永远以美好的未来、炫目的前景，还有光鲜亮丽的词语安慰着我们，但是他真的能够拯救一切吗？</p></blockquote>

<p>这就是媒体的力量，也是媒体的责任！媒体能够制造一个好的时代，也可以毁掉一个好的时代！</p>

<h2>阅读清单</h2>

<p>技术类：</p>

<p>1、《Pro iOS 5 Augmented Reality》</p>

<p>2、《Pro+Git+中文版》</p>

<p>3、《OpenGL ES应用开发实践指南》</p>

<p>科技类：</p>

<p>4、《移动的帝国：日本移动互联网兴衰启示录》</p>

<p>5、《颠覆医疗》</p>

<p>6、《黑天鹅》</p>

<p>7、《计算机：一部历史》</p>

<p>8、《iGod》</p>

<p>9、《奥莱利的词媒体帝国》</p>

<p>10、《周鸿祎自述—我的互联网方法论》</p>

<p>11、《文明》</p>

<p>12、《九败一胜：美团创始人王兴创业十年》</p>

<p>13、《穿布鞋的马云》</p>

<p>14、《跨界：开启互联网与传统行业融合新趋势》</p>

<p>15、《教训：互联网创业必须避免的八大误区》</p>

<p>16、《孵化Twitter:从蛮荒到IPO的狂野旅程》</p>

<p>人文类：</p>

<p>17、《内在的从容》</p>

<p>18、《风中的纸屑》</p>

<p>19、《人与永恒》</p>

<p>20、《被劫持的私生活》</p>

<p>21、《台湾念真情》</p>

<p>22、《这些人，那些事》</p>

<p>23、《我与父辈》</p>

<p>24、《向前一步》</p>

<p>25、《我们台湾这些年》</p>

<p>26、《我幻想着粉碎现有的一切 — 苏珊·桑塔格访谈录》</p>

<p>27、《少年台湾》</p>

<p>28、《人生一瞬》</p>

<p>29、《从你的全世界路过》</p>

<p>30、《安藤忠雄：在建筑中发现梦想》</p>

<p>经济类：</p>

<p>31、《集装箱改变世界》</p>

<p>32、《不止于物流》</p>

<p>管理类：</p>

<p>33、《星巴克体验：为每一个顾客打造个性化服务》</p>

<p>34、《一键下单：杰夫贝佐斯与亚马逊的崛起》</p>

<p>35、《一只iPhone的全球之旅》</p>

<p>营销类：</p>

<p>36、《参与感:小米口碑营销内部手册》</p>

<p>37、《定位》</p>

<p>产品设计：</p>

<p>38、《在你身边，为你设计》</p>

<p>39、《设计之下》</p>

<p>40、《乔纳森传》</p>

<p>游记类：</p>

<p>41、《两个轮子一个岛》</p>

<p>42、《大陆脚游台湾：宝岛各地》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我听的播客]]></title>
    <link href="http://chenHongbin.github.io/blog/2014/05/17/bo-ke/"/>
    <updated>2014-05-17T10:16:09+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2014/05/17/bo-ke</id>
    <content type="html"><![CDATA[<h2>闲言</h2>

<p>写这篇文章的起源是，大概一周前，我在<a href="http://www.itgonglun.com/">it公论</a>Instagram账号上留言，希望主持人分享下他们常听的播客。没想到很快在最近的一期<a href="http://www.itgonglun.com/episodes/62">桌面出版成就了 Mac，什么来成就 iPad？</a>开场里，两位主持人就分享了他们常听的几个播客。所以，想顺着他们的推荐，把自己的常听的几个播客也整理下，分享出来。</p>

<h2>关于我的播客之旅</h2>

<p>我是一个重度的<a href="http://zh.wikipedia.org/wiki/%E6%92%AD%E5%AE%A2">播客(podcast)</a>用户，听播客已经成为了我生活中必不可少的一个习惯。这个习惯的养成要特别的感谢大学宿友金胖，大一刚入学的时候，我是一个极其懵懂无知的少年（现在依然还是很无知的），对于外面世界知之甚少，知识面极度狭隘。刚认识金胖那会儿看着他经常带着耳机，一直以为他是在听歌，后来无意中发现他的MP4里除了一些歌外，还有很大一部分《百家讲坛》之类的音频，他告诉我他收集了一堆的这类音频，经常在坐公交车或者走路的时候听这些。这个事情深深的触动了我，觉得这个行为真的太赞了，我必须学习。于是，我鼓起了勇气向姐姐申请财政拨款，现在已经忘记当初用了什么说辞了，姐姐很快就同意了。（说到此，我得感谢下我姐，我姐是个深明大义的人，她对于我提出的要求，只要是我能够给出一个合理的理由，她都会马上给予支持，从一开始的MP4，到后来学习iOS开发用的iPad、MBP无一例外）于是，我拉着金胖到电子城买了一个OPPO的MP4，从此开始了我的&#8221;播客之旅&#8221;（暂且把那种形式也称为播客吧）</p>

<p>现在已经记不得听的第一个节目具体是什么了，但是，可以肯定的一点是我是从百家讲坛开始听的，《于丹论语心得》、《于丹庄子心得》、《易经的智慧》、《胡雪岩的启示》、《大国的崛起》、《社会的源动力&mdash;经济》等等，也正是为了找这些资源让我发现了VeryCD，然后在上面掏了除了百家讲坛之外的其他的各种各样的音频，有英语学习的、有成功学的、有各种有声电子书，这些东西慢慢的打开了我的视野，更进一步说，这些东西慢慢的让我开始去思考自己的人生，去寻找自己所喜欢的东西，慢慢的让我知道什么是人生观、价值观。印象最深的是听了<a href="http://book.douban.com/subject/3070126/">季羡林自述的《我这一生》</a>这本书，里面的一句话深深的触动了我。</p>

<blockquote><p>我这一生，同别人差不多，阳关大道，独木小桥，都走过跨过，坎坎坷坷，弯弯曲曲，一路走了过来，我曾问过自己一个问题：如果真有那么一个造物主，要加恩于我，让我下一辈子还转生为人，我是不是还走今生的这一盘棋路？经过了一些思虑，我的回答是：还是走这一条路。但是有一个附带条件；让我的脸皮厚一点，让我的心黑一点，让我考虑自己的利益多一点，让我自知之明少一点。</p></blockquote>

<p>看完这本书后，我去图书馆借了这本书，从头到尾认认真真的看了一遍。就这样，我不断的听“播客”、然后通过网络、图书馆查看相应的资料或书籍，从中学到很多知识，事业也渐渐的开阔开来。记得最“上瘾”的时候，我甚至把最喜欢的广播节目《千里共良宵》从网络上下下来，然后一期一期的放到MP4里面去听。也就这样渐渐的养成了习惯。</p>

<p>很可惜的是，在大二下学期去泉州玩的时候，我把那个MP4给弄丢了，因为各种问题，我也没有再听“播客”了，而改成看书、读报纸、杂志了，这又是一个可以值得大写特写的一个经历。</p>

<p>后来，用上了安卓机，本以为又可以过上听“播客”的日子，可是事与愿违，一方面我用的机子是当时的合约机，真心的烂，导入音乐听起来感觉特别的难受，另一方面我找遍了各个应用商店都没有找到一款好用的podcast应用。因此，又只能无奈作罢。直到去年年底，我狠下心把手机换成了iPhone，然后装上了<a href="https://itunes.apple.com/cn/app/podcasts/id525463029?mt=8">Podcasts</a> ，在知乎、百度、Google、Quora查找各种值得听的podcast节目，经过一阵子的试听、筛选，也慢慢的形成了自己的podcast列表。每天，我都是听着播客上下班，有时候因为播客的时间比较长，我还会特地绕远路来听。这种感觉真的超好的！</p>

<p>说了这么多题外话，现在让我们进入重点吧，我在下面把自己喜欢的播客、还有<a href="http://www.itgonglun.com/">it公论</a>上主持人推荐的节目整理下吧。</p>

<h2>本人推荐播客：</h2>

<p>1、<a href="http://www.itgonglun.com/">it公论</a>：主要由字节社创始人李如一和Rio主持，偶尔会邀请一个嘉宾，主要聊一些当前热门的科技话题。</p>

<p>2、<a href="http://dongwu.21cbr.com/">东吴相对论</a>：由梁冬和吴伯凡主持，是一档不错的财经类节目，特别需要说明的是，里面梁冬的笑声真的特夸张。</p>

<p>3、一席：这个是国内版TED &mdash;&ndash; 一席的音频版，每月一期，邀请人文、科技领域有故事、有智识的嘉宾前来分享见解、体验和想象，也可以看他的视频版</p>

<p>4、罗辑思维：这个很明显，就是最火的自媒体&mdash;罗辑思维的音频版，对于我这种人，真的不想看视频，都是听音频的。</p>

<h2>IT公论中推荐的播客(全英文节目，听起来有压力，部分需要翻墙才能收听)：</h2>

<p>1、<a href="http://atp.fm/">Accidental Tech Podcast</a>：科技类，需要翻墙</p>

<p>2、<a href="http://neutral.fm/">Neutral</a>：科技类</p>

<p>3、<a href="http://www.muleradio.net/thetalkshow/">The Talk Show</a>：科技类</p>

<p>4、<a href="http://www.anandtech.com/tag/podcast">The AnandTech Podcast</a>：科技类</p>

<p>5、<a href="http://a16z.com/tag/podcast/">a16z podcast</a></p>

<p>6、<a href="http://cubed.fm/">Cubed</a></p>

<p>7、<a href="http://zhuanlan.zhihu.com/lawrencelry/19753266">Stuff You Should Know</a>：科普类节目</p>

<p>8、<a href="http://ifiwereyoushow.com/">If I Were You</a> ：搞笑节目，需要翻墙</p>

<h2>几个iOS技术类播客</h2>

<p>1、<a href="http://iohyespodcast.com/">iOhYes</a></p>

<p>2、<a href="http://nsbrief.com/">NSBrief</a></p>

<p>3、<a href="http://www.imore.com/debug">Debug</a></p>

<p>4、<a href="http://www.raywenderlich.com/rwpodcast">raywenderlich</a></p>

<h2>最后</h2>

<p>上面推荐的大部分播客都是英语的，对于英语水平极烂的我很多时候都是听不懂的，更多的是去他们的博客上看看每期的内容和相关的文章。</p>

<p>最后推荐一个最近刚入的很不错的播客app <a href="http://castro.fm/">Castro</a> 25块，值得拥有,这是这个软件作者Dan Benjamin说的话。</p>

<blockquote><p>Podcasting apps are so tough to get right. I’ve tried them all, and Castro fits perfectly with the way I like to manage and listen.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[View-Laye协作的学习笔记]]></title>
    <link href="http://chenHongbin.github.io/blog/2014/05/16/view-layexie-zuo-wen-zhang-xue-xi-bi-ji/"/>
    <updated>2014-05-16T07:31:38+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2014/05/16/view-layexie-zuo-wen-zhang-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<h2>闲言</h2>

<p>又到了周五，一周就这样灰溜溜的过去了，想着即将到来的周末还是挺激动的，虽然周日被公司活动无情的占用了，虽然得到晚上9点半后才能回来，虽然。。。。。。</p>

<p>这是我的第三篇博客文章，到目前为止感觉还是挺不错的，挺有冲动写文章的，但是，总是苦于不知道写什么。建这个博客的初衷是为了记录自己的生活、工作和学习。曾经志向远大，1、每读完一本书，就在这上面写一篇读书笔记（今年到现在为了读了十多本，还没写过一篇）2、每看到一篇好的英语博客，都把它翻译到这里来（medium.com已经收藏了一堆的文章、RSS里也藏了一堆、Pocket里也有一堆） 3、每学习新的技术知识就这里写几篇总结文章（最近用Mantle和AF用的巨爽，但是也是没有什么行动）。所以，问题其实也并不是不知道写什么，而是自己略懒，同时，时间管理上还是存在很多问题。但是无论如何，现在已经开始了也为时不晚，就像那天姐夫发给我的正能量说的</p>

<pre><code>人生永远都可以随时开始，关键在于你敢不敢果断的转身；任何事都可能有好结果，重要的是你有没有承受光明到来之前的黑暗
</code></pre>

<p>还有一件事就是，决定以后无论什么文章，都要在最前面加上这个“闲言”栏目，先扯扯人生、谈谈理想、抒发抒发感慨，再板砖（感觉有点像那些饱读成功学书籍的人，在每次出门前都要对着镜子里的自己高喊“我一定可以成功的！我是最棒的！加油！加油！”）。</p>

<h2>正文</h2>

<p>这是一篇学习笔记，来自于这两天学习<a href="http://objccn.io/issue-12-4/">View-Layer 协作</a>这篇文章，这篇是微博上的大神<a href="http://weibo.com/onevcat">@onevcat</a>译自<a href="http://www.objc.io/">objc.io</a>的<a href="http://www.objc.io/issue-12/view-layer-synergy.html">View-Layer Synergy</a>。看完这篇文章后，发现自己的两点问题，</p>

<pre><code> 1、在学习时，动手实践的精神和思考问题的深度还远远不够，往往总是浅尝则止
 2、在学习官方文档的时候粗心大意，细节都被我忽略了，当然，这个跟本人的英语水平也有一定必然的   
    联系，所以，还是多背单词、少睡觉、多查字典、少偷懒。
</code></pre>

<h2>View和Layer的关系</h2>

<p>1、所有的View都是由一个底层的Layer来驱动的，View其实直接从Layer对象中获取了绝大多数他所需要的数据，因此，对于Layer的修改将会自动映射到所对应的View上，所以，你可以通过修改Layer或者View的属性来达到相同的效果；</p>

<p>2、存在单据的Layer，如<a href="https://developer.apple.com/library/mac/documentation/AVFoundation/Reference/AVCaptureVideoPreviewLayer_Class/Reference/Reference.html">AVCaptureVideoPreviewLayer</a> 和 <a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CAShapeLayer_class/Reference/Reference.html">CAShapeLayer</a>，不需要附加到View上就可以在屏幕上显示内容；</p>

<p>3、以上两种情况，都是Layer在起决定作用，但是附加到View上的Layer和单独的Layer在行为上还是稍有不同的。改变一个单独的Layer的任何animatable属性，都会触发一个从旧值过度到新值的默认简单动画，然后如果改变一个View中的Layer的同一个属性，它只会从这一帧直接跳到下一帧，因为当Layer附件到View上时，默认的隐式动画的Layer行为就不起作用了；</p>

<blockquote><p>If you want to use Core Animation classes to initiate animations, you must issue all of your Core Animation calls from inside a view-based animation block. The UIView class disables layer animations by default but reenables them inside animation blocks.</p></blockquote>

<h2>Layer是如何执行动画的？CAAction</h2>

<p>4、无论何时一个可动画的Layer属性改变时，Layer都会寻找并运行合适的‘action’来实行这个改变，在Core Animation的专业术语中把这样的动画统称为动作（<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>）,<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>,从技术上来说，这是一个接口，并可以用来做各种事情。但是实际中，某种程度上你可以只把它理解为用来处理动画。</p>

<p>5、在改变一个Layer的属性，并执行一个动作(<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>)之前，Layer需要找到相应的动作对象(<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>)。当一个恰当的动作事件发生在Layer时，Layer对象调用 <code>actionForKey:</code> 方法来寻找相应的动作对象(<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>)。我们可以在某些节点提供我们需要的特定动作(<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>)。</p>

<p>6、Layer将像文档中所写的那样去寻找(<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>)，整个过程分为五部，第一步为Layer通过向他的delegate发送<code>actionForLayer:forKey:</code> 消息来询问提供一个对象属性变化的<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CAAction_protocol/Introduction/Introduction.html">CAAction</a>, delegate可以通过返回以下三者之一来进行响应：</p>

<pre><code>(1)、返回一个动作对象，这种情况下Layer将使用这个动作。
(2)、返回一个nil, 这样layer会到其它地方继续寻找
(3)、返回一个NSNull对象，告诉layer这里不需要执行一个动作，搜索也会就此结束
</code></pre>

<p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/ReactingtoLayerChanges/ReactingtoLayerChanges.html#//apple_ref/doc/uid/TP40004514-CH7-SW1">Core Animation文档中如此描述:</a></p>

<blockquote><p>Core Animation looks for action objects in the following order:</p>

<p>1、If the layer has a delegate and that delegate implements the actionForLayer:forKey: method, the layer calls that method. The delegate must do one of the following:</p>

<p>·Return the action object for the given key.</p>

<p>·Return nil if it does not handle the action, in which case the search continues.</p>

<p>·Return the NSNull object, in which case the search ends immediately.</p>

<p>2、The layer looks for the given key in the layer’s actions dictionary.</p>

<p>3、The layer looks in the style dictionary for an actions dictionary that contains the key. (In other word, the style dictionary contains an actions key whose value is also a dictionary. The layer looks for the given key in this second dictionary.)</p>

<p>4、The layer calls its defaultActionForKey: class method.</p>

<p>5、The layer performs the implicit action (if any) defined by Core Animation.</p></blockquote>

<h2>UIView的动画Block解析</h2>

<p>7、当Layer在背后支持一个View的时候，View就是它的delegate。在iOS中，如果Layer与一个UIView对象关联时，view就是它的delegate。</p>

<pre><code>“在 iOS 中，如果 layer 与一个 UIView 对象关联时，这个属性必须被设置为持有这个 layer 的那个 view”
</code></pre>

<p>8、属性改变时 layer 会向 view 请求一个动作，而一般情况下 view 将返回一个 NSNull，只有当属性改变发生在动画 block 中时，view 才会返回实际的动作。</p>

<p>9、对于 view 中的 layer 来说，对动作的搜索只会到第一步为止，即返回一个默认动画或者NSNull。</p>

<p>10、插播：值得注意的是打印出的 NSNull 是带着一对尖括号的 (&ldquo;<null>&rdquo;)，这和其他对象一样，而打印 nil 的时候我们得到的是普通括号((null))。</p>

<p>11、当属性在动画block中改变时，view将向layer返回一个基本的动画，然后动画通过通常的addAnimation:forkey:方法被添加到layer中，就像显示地添加动画那样。</p>

<p>输出值：</p>

<pre><code>&lt;CABasicAnimation:0x8c73680; 
  delegate = &lt;UIViewAnimationState: 0x8e91fa0&gt;;
  fillMode = both; 
  timingFunction = easeInEaseOut; 
  duration = 0.3; 
  fromValue = NSPoint: {5, 5}; 
  keyPath = position&gt;
</code></pre>

<p>12、当动画刚被添加到layer时，属性的新值还没有被改变。在构建动画时，只有fromValue被显示地指定了。在<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CABasicAnimation_class/Introduction/Introduction.html">CABasicAnimation的文档</a>中可以看到具体的关于<code>fromeValue</code>、<code>toValue</code>、<code>byValue</code>的值的问题：</p>

<blockquote><p>The fromValue, byValue and toValue properties define the values being interpolated between. All are optional, and no  more than two should be non-nil. The object type should match the type of the property being animated.</p>

<p>The interpolation values are used as follows:</p>

<p>·Both fromValue and toValue are non-nil. Interpolates between fromValue and toValue.</p>

<p>·fromValue and byValue are non-nil. Interpolates between fromValue and (fromValue + byValue).</p>

<p>·byValue and toValue are non-nil. Interpolates between (toValue &ndash; byValue) and toValue.</p>

<p>·fromValue is non-nil. Interpolates between fromValue and the current presentation value of the property.</p>

<p>·toValue is non-nil. Interpolates between the current value of keyPath in the target layer’s presentation layer and toValue.</p>

<p>·byValue is non-nil. Interpolates between the current value of keyPath in the target layer’s presentation layer and that value plus byValue.</p>

<p>·All properties are nil. Interpolates between the previous value of keyPath in the target layer’s presentation layer and the current value of keyPath in the target layer’s presentation layer.</p></blockquote>

<p>13、关于上面输出的delegate，是一个UIViewAnimationState的私有类对象，主要用来维护动画的一些状态，如持续时间、延时、重复次数等等。还负责对一个栈做push和pop,这是为了在多个动画block嵌套时，能够获取正确的动画状态 可以看看<a href="https://github.com/rpetrich/iphoneheaders/blob/master/UIKit/UIViewAnimationState.h">dump出来的头文件</a></p>

<p>14、UIViewAnimationState对象作为UIView返回给Layer的动画的delegate实现了<code>animationDidStart:</code> 和 <code>animationDidStop:finished:</code>方法，并将信息传给了自己的delegate, 这个delegate是一个私有类：UIViewAnimationBlockDelegate，<a href="https://github.com/EthanArbuckle/IOS-7-Headers/blob/master/Frameworks/UIKit.framework/UIViewAnimationBlockDelegate.h">dump出来的头文件</a>，这是一个很小的类，只负责一件事情：响应动画的delegate回调并且执行相应的block。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于CALayer的position和anchorPoint的一点理解]]></title>
    <link href="http://chenHongbin.github.io/blog/2014/05/11/guan-yu-calayerde-positionhe-anchorpointde-%5B%3F%5D-dian-li-jie/"/>
    <updated>2014-05-11T12:13:48+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2014/05/11/guan-yu-calayerde-positionhe-anchorpointde-[?]-dian-li-jie</id>
    <content type="html"><![CDATA[<h2>闲言</h2>

<p>翻看记录，发现自从3月底搭建完这个blog写了第一篇文章后，就再也没有写过任何东西了，只能在心底强烈的鄙视自己一番。鉴于最近在新项目中学到不少东西，同时，发现很多东西没有掌握，所以计划在接下来的一段时间内，好好学习，偶尔记录，希望能多写点东西。</p>

<h2>关于CALayer</h2>

<p>在Core Animation中最基本也是最重要的内容就是CALayer，每个UIView都有一个CALayer对象。CALayer在很多方面与UIView非常相似。它拥有位置、大小、变形和内容。但是CALayer并不是用来替代UIView对象的，相反，它是和UIView一起协作的。UIView是一个很重量级的对象，它管理绘制与事件处理（尤其是触摸事件），CALayer则完全关乎绘制，UIView依靠CALayer来管理绘制，通过这样的分工两者就能协作的更好。</p>

<h2>CALayer的几何属性</h2>

<p>就像前面说的，CALayer拥有自己的位置（position）、大小(bounds,frame)、变形(transform)和内容(content)，同时，它还拥有一个UIView所没有的属性anchorPoint。其中position、bounds、frame是基于点坐标系的（point-based coordinate systems），而anchorPoint是基于单元坐标系的（unit coordinate systems），即X坐标和Y坐标的取值在0-1之间。bounds和frame的意思比较好理解，farme为CALayer在其父层（superLayer）上的位置和大小，而bounds则是可以简单理解为CALayer的大小，其X坐标和Y坐标为0。剩下的position和anchorPoint则是最容易让人困惑的。</p>

<h2>position</h2>

<p>在CALayer.h文件中我们可以看到:</p>

<pre><code>/* The position in the superlayer that the anchor point of the layer's
 * bounds rect is aligned to. Defaults to the zero point. Animatable. */

@property CGPoint position;
</code></pre>

<p>即position是CALayer的anchorPoint在其父层（superLayer）的关联位置。</p>

<h2>anchorPoint</h2>

<p>同样，在CALayer.h文件中我们可以看到:</p>

<pre><code>/* Defines the anchor point of the layer's bounds rect, as a point in
 * normalized layer coordinates - '(0, 0)' is the bottom left corner of
 * the bounds rect, '(1, 1)' is the top right corner. Defaults to
 * '(0.5, 0.5)', i.e. the center of the bounds rect. Animatable. */

 @property CGPoint anchorPoint;
</code></pre>

<p>即anchorPoint的值是相对bounds的比例值来确定的，在坐标系的左上角和右下角anchorPoint的值分别为（0，0）和（1，1），需要注意点是，文档中说的是左下角和右上角，这是在OS X上，iOS与OS X相反。anchorPoint的默认值为（0.5，0.5）即CALayer的中心位置。</p>

<p>接下来看下面两张图，只看iOS部分即可，</p>

<p><img src="http://chenHongbin.github.io/images/2014-05-10-anchor/layer_coords_anchorpoint_position_2x.png" title="ahchor1" alt="Alt ahchor1" /></p>

<p>图1</p>

<p><img src="http://chenHongbin.github.io/images/2014-05-10-anchor/anchorpoint2.jpg" title="ahchor2" alt="Alt ahchor2" /></p>

<p>图2</p>

<p>在图1中，我们可以看到，position的值是anchorPoint点在superLayer中的坐标位置。所以position点是相对于superLayer的，而anchorPoint点是相对于CALayer本身的。两者是相对不同的坐标空间的一个重合点。</p>

<p>在图2中，我们可以看到，anchorPoint的作用，其实是在CALayer做动画时的一个锚点，所有的变化是以anchorPoint为锚点进行的，相同的动画，不同的锚点，效果是全然不同的。具体的描述可以看<a href="http://wonderffee.github.io/blog/2013/10/13/understand-anchorpoint-and-position/">彻底理解position与anchorPoint</a>这篇博文。</p>

<h2>anchorPoint、position和frame之间的关系</h2>

<p>在官方的<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html">Core Animation文档中</a>有这样的一句话：</p>

<blockquote><p> The bounds defines the coordinate system of the layer itself and encompasses the layer’s size on the screen. The position property defines the location of the layer relative to its parent’s coordinate system. Although layers have a frame property, that property is actually derived from the values in the bounds and position properties and is used less frequently.</p></blockquote>

<p>也就是说CALayer的frame是由CALayer的bounds属性和position属性确定的，bounds决定大小，position决定位置</p>

<pre><code> frame.origin.x = position.x - anchorPoint.x * bounds.size.width;
 frame.origin.y = position.y - anchorPoint.y * bounds.size.height;
 frame.size.width  = bounds.size.width;
 frame.size.height = bounds.size.height;
</code></pre>

<p>为此我写了一段测试代码</p>

<pre><code>CALayer *testLayer = [[CALayer alloc] init];
testLayer.frame = (CGRect){
    .origin.x = 10,
    .origin.y = 10,
    .size.width =  100,
    .size.height = 100
};
testLayer.backgroundColor = [UIColor redColor].CGColor;
[self.view.layer addSublayer:testLayer];

NSLog(@"testLayer frame = %@",NSStringFromCGRect(testLayer.frame));
NSLog(@"testLayer bounds = %@",NSStringFromCGRect(testLayer.bounds));
NSLog(@"testLayer position = %@",NSStringFromCGPoint(testLayer.position));
NSLog(@"testLayer anchorPoint = %@",NSStringFromCGPoint(testLayer.anchorPoint));

NSLog(@"\n");
NSLog(@"Change Position(20, 20)");
testLayer.position = CGPointMake(20, 20);

NSLog(@"testLayer frame = %@",NSStringFromCGRect(testLayer.frame));
NSLog(@"testLayer bounds = %@",NSStringFromCGRect(testLayer.bounds));
NSLog(@"testLayer position = %@",NSStringFromCGPoint(testLayer.position));
NSLog(@"testLayer anchorPoint = %@",NSStringFromCGPoint(testLayer.anchorPoint));


NSLog(@"\n");
NSLog(@"Change anchorPoint(0.4, 0.4)");
testLayer.anchorPoint = CGPointMake(0.4, 0.4);

NSLog(@"testLayer frame = %@",NSStringFromCGRect(testLayer.frame));
NSLog(@"testLayer bounds = %@",NSStringFromCGRect(testLayer.bounds));
NSLog(@"testLayer position = %@",NSStringFromCGPoint(testLayer.position));
NSLog(@"testLayer anchorPoint = %@",NSStringFromCGPoint(testLayer.anchorPoint))
</code></pre>

<p>其输出为：</p>

<pre><code>testLayer frame = ((10, 10), (100, 100))
testLayer bounds = ((0, 0), (100, 100))
testLayer position = (60, 60)
testLayer anchorPoint = (0.5, 0.5)

Change Position(20, 20)
testLayer frame = ((-30, -30), (100, 100))
testLayer bounds = ((0, 0), (100, 100))
testLayer position = (20, 20}
testLayer anchorPoint = (0.5, 0.5)

Change anchorPoint(0.4, 0.4)
testLayer frame = ((-20, -20), (100, 100))
testLayer bounds = ((0, 0), (100, 100))
testLayer position = (20, 20)
testLayer anchorPoint = (0.40000001, 0.40000001)
</code></pre>

<p>从中我们可以验证我们之前的公式是正确的，即frame的origin是由position和anchorPoints共同决定的，而frame的size则是由bounds决定的。</p>

<p>另外一个问题就是，单方面修改layer的position位置或者是anchorPoint，其两者互不影响，受影响的只会是frame.origin，也就是layer坐标原点相对superLayer会有所改变。</p>

<p>最后，在<a href="http://wonderffee.github.io/blog/2013/10/13/understand-anchorpoint-and-position/">彻底理解position与anchorPoint</a>这篇博文的有说到一点，</p>

<blockquote><p>Apple doc中还有一句描述是这样的：</p>

<blockquote><p>When you specify the frame of a layer, position is set relative to the anchor point. When you specify the position of the layer, bounds is set relative to the anchor point.</p></blockquote>

<p>大意是：当你设置图层的frame属性的时候，position根据锚点（anchorPoint）的值来确定，而当你设置图层的>position属性的时候，bounds会根据锚点(anchorPoint)来确定。
这段翻译的上半句根据前面的公式容易理解，后半句可能就有点令人迷惑了，当修改position时，bounds的width与>height会随之修改吗？其实,position是点，bounds是矩形，根据锚点(anchorPoint)来确定的只是它们的位置，而不>是内部属性。所以，上面这段英文这么翻译就容易理解了：</p>

<blockquote><p>当你设置图层的frame属性的时候，position点的位置（也就是position坐标）根据锚点（anchorPoint）的值来确 定，而当你设置图层的position属性的时候，bounds的位置（也就是frame的orgin坐标）会根据锚点(anchorPoint)来确定</p></blockquote></blockquote>

<h2>最后</h2>

<p>终于完成第一篇技术博客，发现确实写文章和写代码很像，对于如何提高自己的思路和条理有大帮助，应该好好把握，多写写，哈哈！</p>

<h3>参考</h3>

<ul>
<li><p><a href="http://wonderffee.github.io/blog/2013/10/13/understand-anchorpoint-and-position/">彻底理解position与anchorPoint</a></p></li>
<li><p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html">Core Animation Programming Guide</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你好！我的第一篇博客]]></title>
    <link href="http://chenHongbin.github.io/blog/2014/03/22/ni-hao-%21wo-de-di-%5B%3F%5D-pian-bo-ke/"/>
    <updated>2014-03-22T12:13:48+08:00</updated>
    <id>http://chenHongbin.github.io/blog/2014/03/22/ni-hao-!wo-de-di-[?]-pian-bo-ke</id>
    <content type="html"><![CDATA[<pre><code>发现很多时候，自己有很多想法、很多想要的事，但是却总是停留在“想”上面，行动一直跟不上。
</code></pre>

<p>我一直是一个&#8221;跟风型&#8221;的人，每次看到别人身上有什么优点，而这个优点又是适合我的，我势必想尽办法复制过来为我所用，无论是大学时候听百家讲坛、看报纸、看杂志，还是毕业后坚持看书的习惯，都是我从身边的朋友、或者所崇拜的人那里复制学习而来，然后慢慢的将其变成自己的习惯。写博客，一直是很多技术大牛所极力推荐和践行的学习方法和生活方式，所以我也一直想搞一个自己的博客来记录自己的工作、学习和生活，当然最原始的动机还是因为很多大牛说，通过写技术博客可以大大提高自己的技术水平。（哈哈 想想功利性太强了哈）</p>

<p>最开始有在网易博客写了几篇技术文章，其实也不算是写，那个时候是菜鸟中的彩鸟，（显然现在也还是菜鸟）只是做了一个搬运工，把别人的写好的给搬运到自己的博客下，后来没坚持多久就没写了，主要是很不喜欢网易博客的风格，广告一堆一堆的，看了真心烦。后来，加入了一个开发群，里面的一个大牛说可以用一个叫Octopress搭建一个Github的博客，当时，那个心情跟哥伦布大哥发现新大陆的心情应该是一样的。然后，立刻到他的博客上去看他的那篇介绍文字，看完后，我得心也凉了，里面太多的技术词不懂，看的云里来雾里去，还说要有一个自己的ip地址，本来就没什么信心的我，在没有任何尝试的情况下就放弃。后面，也常看到别人发到微博上关于搭建博客的教程，大都也是收藏了，然后就没有然后（原来我真的是三分钟热度的人哦）。</p>

<p>直到最近看了<a href="http://nathanmarz.com/blog/you-should-blog-even-if-you-have-no-readers.html">You should blog even if you have no readers</a>和<a href="http://www.vaikan.com/developer-road-the-list/">如何成为一名程序员:我的道路</a>这两篇文章，重新激起了我搭建一个自己的博客的想法。我觉得这次无论如何都要成功。于是，这两天利用空闲时间，根据破船大哥的文章<a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">利用Octopress搭建一个Github博客</a>搭建了这个博客，结果发现之前所想象的困难，都是自己吓自己而已，虽然对于git和markdown都不是很了解，但是按照网上的参考资料一步一步来，很容易就能搭建好了。很多时候，并不是困难把我们吓到了，而是我们自己把自己吓倒了，就想阿甘的妈妈说的：“人生就像一盒混着各种口味的巧克力，你不吃下去，永不都不知道下一个巧克力是什么味道”（好像这句话根本不是这样的，忽略吧）</p>
]]></content>
  </entry>
  
</feed>
